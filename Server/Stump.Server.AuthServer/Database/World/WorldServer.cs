using System;
using System.ServiceModel;
using System.ServiceModel.Channels;
using Dapper.Contrib.Extensions;
using Stump.DofusProtocol.Enums;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.AuthServer.IPC;
using Stump.Server.BaseServer.IPC;

namespace Stump.Server.AuthServer.Database
{
    public class WorldServerRelator
    {
        public static string FetchQuery = "SELECT * FROM worlds";
    }

    [TableName("worlds")]
    [Table("worlds")]
    public partial class WorldServer : DbObject<WorldServer>, IAutoGeneratedRecord
    {
        public WorldServer()
        {
            Status = ServerStatusEnum.OFFLINE;
        }

        [PrimaryKey("Id", false)]
        [Key]
        [Write(true)]
        public int Id
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public ushort Port
        {
            get;
            set;
        }

        public string Address
        {
            get;
            set;
        }

        public bool RequireSubscription
        {
            get;
            set;
        }

        public int Completion
        {
            get;
            set;
        }

        public bool ServerSelectable
        {
            get;
            set;
        }

        public int CharCapacity
        {
            get;
            set;
        }

        public int? CharsCount
        {
            get;
            set;
        }

        public RoleEnum RequiredRole
        {
            get;
            set;
        }


        #region Status

        public ServerStatusEnum Status
        {
            get;
            set;
        }

        public bool Connected
        {
            get { return Status == ServerStatusEnum.ONLINE; }
        }

        [Computed]
        public IPCClient IPCClient
        {
            get;
            set;
        }

        [Computed]
        public DateTime LastPing
        {
            get;
            set;
        }

        public void SetOnline(IPCClient client)
        {
            Status = ServerStatusEnum.ONLINE;
            LastPing = DateTime.Now;
            IPCClient = client;
        }

        public void SetOffline()
        {
            Status = ServerStatusEnum.OFFLINE;
            CharsCount = 0;
            IPCClient = null;
        }

        #endregion

        public override string ToString()
        {
            return string.Format("{0}({1})", Name, Id);
        }
    }
}