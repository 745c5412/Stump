using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using NLog;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.OpenSsl;
using Stump.Core.Extensions;
using Stump.Core.IO;
using Stump.Core.Reflection;
using Stump.DofusProtocol.Messages;
using Stump.Server.AuthServer.Database;

namespace Stump.Server.AuthServer.Managers
{
    public class CredentialManager : Singleton<CredentialManager>
    {
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();

        public CredentialManager()
        {
            m_rsaPublicKey = GenerateRSAPublicKey();
        }

        private readonly string m_salt = new Random().RandomString(32);
        private readonly sbyte[] m_rsaPublicKey;

        private readonly RSACryptoServiceProvider m_rsaProvider = new RSACryptoServiceProvider();

        public sbyte[] GetRSAPublicKey()
        {
            //return m_rsaPublicKey;
            // copy of the server public key
            return new byte[]
            {
                0x9B, 0xE7, 0x20, 0xAA, 0x42, 0x0F, 0x12, 0xB4, 0x72, 0xA7, 0x1D, 0x45, 0x13, 0x03, 0x82, 0x3D, 0xC2, 0xB6,
                0x4D, 0x6C, 0xFE, 0x06, 0x2F, 0x30, 0xBC, 0xF3, 0x83, 0x1A, 0x17, 0x1F, 0x93, 0x3D, 0xC6, 0x78, 0x53,
                0x38, 0xB2, 0x0B, 0x92, 0xBE, 0x18, 0xB3, 0xCB, 0xD0, 0xCD, 0x7A, 0x02, 0xCC, 0xA4, 0x34, 0x1F, 0xD2,
                0xFD, 0x6D, 0x49, 0x5E, 0x6E, 0x27, 0x19, 0xD3, 0xB2, 0x6D, 0x49, 0xC7, 0x54, 0x85, 0x1D, 0xF1, 0x24,
                0x6B, 0xCA, 0xE5, 0xAC, 0xB8, 0x8A, 0xD1, 0x82, 0xF1, 0x16, 0x4C, 0xE1, 0xDD, 0x9E, 0x20, 0x80, 0x81,
                0x19, 0x9E, 0x48, 0x62, 0x7F, 0x8C, 0xF7, 0x26, 0xAC, 0x29, 0x7D, 0xF6, 0x0A, 0x3A, 0x4B, 0x84, 0xE0,
                0x40, 0xF7, 0x74, 0x9D, 0x2B, 0xBC, 0x13, 0xDA, 0x15, 0x73, 0x7C, 0x2A, 0x8E, 0x62, 0x54, 0xFE, 0xD7,
                0xBF, 0x3F, 0x87, 0x95, 0x96, 0xD5, 0x9A, 0xB8, 0x33, 0x53, 0x97, 0x98, 0x8E, 0x3E, 0x19, 0x1F, 0xE7,
                0x15, 0x20, 0x19, 0x51, 0x2E, 0x1A, 0x9C, 0x24, 0xD9, 0x76, 0x4F, 0x95, 0x8C, 0x64, 0x29, 0xDF, 0x85,
                0x95, 0x4C, 0x40, 0x1D, 0x5B, 0xCF, 0x61, 0x15, 0xEA, 0xCE, 0xA5, 0x02, 0x26, 0x70, 0xED, 0xA8, 0xEA,
                0x7B, 0xB6, 0x65, 0x4D, 0xED, 0xB6, 0xCF, 0x4B, 0xFE, 0x26, 0x7B, 0x2B, 0x87, 0x13, 0x2B, 0xCE, 0x4B,
                0x4D, 0x54, 0x2E, 0x41, 0x89, 0x21, 0x8C, 0x04, 0xF3, 0x37, 0x0F, 0x01, 0xF0, 0x85, 0x17, 0x80, 0x59,
                0xA1, 0x47, 0x6B, 0x67, 0x3A, 0xA1, 0x5E, 0x61, 0x68, 0xE4, 0x75, 0x93, 0x42, 0xD9, 0xBC, 0xF1, 0xE9,
                0x8C, 0xC0, 0xEE, 0x04, 0x67, 0x96, 0x2C, 0x5D, 0x3D, 0x5D, 0xC2, 0xAA, 0x3D, 0x7A, 0x30, 0x8A, 0x09,
                0x72, 0x9B, 0xBA, 0xA6, 0xC5, 0x9E, 0x56, 0x7C, 0x3D, 0x4B, 0x63, 0x6F, 0xE5, 0x4F, 0xE5, 0x6C, 0x0A,
                0xCE, 0x75, 0x9C, 0xCA, 0xA9, 0x6A, 0x1C, 0x36, 0x6F, 0xCB, 0x80, 0xF1, 0xA2, 0xCF, 0x15, 0x80, 0x8E,
                0xBE, 0x4A, 0xDB, 0x2D, 0xEA, 0x89, 0xC2, 0xC9, 0x93, 0xF5, 0xC1, 0xF8, 0x34, 0xAD, 0x7B, 0x03, 0xEF,
                0xF3, 0x13, 0xBD, 0x91, 0xB0, 0x6C, 0x40, 0x70, 0x12, 0xC1, 0xA5, 0xE3, 0xC1, 0x03, 0x72
            }.Select(x => (sbyte)x).ToArray();
        }

        public string GetSalt()
        {
            return m_salt;
        }

        private sbyte[] GenerateRSAPublicKey()
        {
            var exportParameters = m_rsaProvider.ExportParameters(false);
            var keyParameters = new RsaKeyParameters(false, new BigInteger(1, exportParameters.Modulus), new BigInteger(1, exportParameters.Exponent));
            
            var stringBuilder = new StringBuilder();
            var writer = new PemWriter(new StringWriter(stringBuilder));
            writer.WriteObject(keyParameters);

            var key = stringBuilder.ToString();

            var partial = key.Remove(key.IndexOf("-----END PUBLIC KEY-----")).Remove(0, "-----BEGIN PUBLIC KEY-----\n".Length);

            return Convert.FromBase64String(partial).Select(entry => (sbyte)entry).ToArray();
        }

        public bool DecryptCredentials(out Account account, IdentificationMessage message)
        {
            try
            {
                account = null;

                if (message.useLoginToken)
                {
                    var ticket = Encoding.ASCII.GetString(message.lang.Split(',').Select(x => (byte)int.Parse(x)).ToArray());

                    account = AccountManager.Instance.FindCachedAccountByTicket(ticket);

                    return account != null;
                }
                else
                {
                    var split = message.lang.Split('|');
                    if (split.Length != 2)
                    {
                        logger.Debug("Connection attempt without the patched client");
                        return false;
                    }

                    var username = split[0];
                    var password = split[1];

                    account = AccountManager.Instance.FindAccountByLogin(username);

                    if (account == null)
                        return false;

                    return account.PasswordHash == password.GetMD5();
                }
            }
            catch (Exception)
            {
                account = null;
                return false;
            }
        }
    }
}