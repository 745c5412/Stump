using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Stump.Core.IO;
using Stump.DofusProtocol.D2oClasses;
using Stump.DofusProtocol.D2oClasses.Tools.D2o;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.Items.Templates;
using Stump.Server.WorldServer.Game.Items;

namespace Stump.Server.WorldServer.Database.Jobs
{
    public static class RecipeRelator
    {
        public static string FetchQuery = "SELECT * FROM recipes";
    }

    [TableName("recipes")]
    [D2OClass("Recipe", "com.ankamagames.dofus.datacenter.jobs")]
    public class RecipeRecord : IAssignedByD2O, IAutoGeneratedRecord
    {
        [PrimaryKey("Id", false)]
        public int Id
        {
            get;
            set;
        }

        public ItemTemplate ItemTemplate => m_template ?? (m_template = ItemManager.Instance.TryGetTemplate(Id));

        public uint ResultNameId
        {

            get;
            set;
        }

        public uint ResultTypeId
        {

            get;
            set;
        }

        [D2OIgnore]
        public uint ResultLevel
        {

            get;
            set;
        }

        [Ignore]
        public List<int> IngredientIds
        {
            get { return m_ingredientIds; }
            set
            {
                m_ingredientIds = value;
                m_ingredientIdsBin = value?.ToBinary();
            }
        }

        public ItemTemplate[] Ingredients
        {
            get { return m_ingredients ?? (m_ingredients = IngredientIds.Select(x => ItemManager.Instance.TryGetTemplate(x)).ToArray());}
        }

        private byte[] m_ingredientIdsBin;
        public byte[] IngredientIdsBin
        {
            get { return m_ingredientIdsBin; }
            set
            {
                m_ingredientIdsBin = value;
                m_ingredientIds = value?.ToObject<List<int>>();
            }
        }

        [Ignore]
        public List<uint> Quantities
        {
            get { return m_quantities; }
            set
            {
                m_quantities = value;
                m_quantitiesBin = value?.ToBinary();
            }
        }

        private byte[] m_quantitiesBin;
        private List<int> m_ingredientIds;
        private List<uint> m_quantities;
        private ItemTemplate m_template;
        private ItemTemplate[] m_ingredients;

        public byte[] QuantitiesBin
        {
            get { return m_quantitiesBin; }
            set
            {
                m_quantitiesBin = value;
                m_quantities = value?.ToObject<List<uint>>();
            }
        }

        public int JobId
        {
            get;
            set;
        }

        public int SkillId
        {
            get;
            set;
        }

        public virtual void BeforeSave(bool insert)
        {
            m_ingredientIdsBin = m_ingredientIds?.ToBinary();
            m_quantitiesBin = m_quantities?.ToBinary();

        }

        public void AssignFields(object obj)
        {
            var castedObj = (Recipe)obj;

            Id = castedObj.resultId;
            ResultNameId = castedObj.resultNameId;
            ResultTypeId = castedObj.resultTypeId;
            ResultLevel = castedObj.resultLevel;
            IngredientIds = castedObj.ingredientIds;
            Quantities = castedObj.quantities;
            JobId = castedObj.jobId;
            SkillId = castedObj.skillId;
        }
    }
}