using System;
using System.Collections.Generic;
using System.Linq;
using ServiceStack.Text;
using Stump.Core.IO;
using Stump.DofusProtocol.D2oClasses;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Database.I18n;
using Stump.Server.WorldServer.Game.Effects;
using Stump.Server.WorldServer.Game.Effects.Instances;
using Stump.Server.WorldServer.Game.Items;

namespace Stump.Server.WorldServer.Database.Items.Templates
{
    public class ItemSetTemplateRelator
    {
        public static string FetchQuery = "SELECT * FROM items_sets";
    }


    [TableName("items_sets")]
    [D2OClass("ItemSet", "com.ankamagames.dofus.datacenter.items")]
    public sealed class ItemSetTemplate : IAutoGeneratedRecord, IAssignedByD2O, ISaveIntercepter
    {
        private string m_effectsJSON;
        private string m_itemsCSV;
        private string m_name;

        public uint Id
        {
            get;
            set;
        }

        public string ItemsCSV
        {
            get { return m_itemsCSV; }
            set
            {
                m_itemsCSV = value;

                if (value != null)
                    Items = DeserializeItems(value);
            }
        }

        [Ignore]
        public ItemTemplate[] Items
        {
            get;
            set;
        }

        public uint NameId
        {
            get;
            set;
        }

        public string Name
        {
            get { return m_name ?? (m_name = TextManager.Instance.GetText(NameId)); }
        }

        public Boolean BonusIsSecret
        {
            get;
            set;
        }

        public string EffectsJSON
        {
            get { return m_effectsJSON; }
            set
            {
                m_effectsJSON = value;

                if (m_effectsJSON != null)
                    Effects = DeserializeEffects(m_effectsJSON);
            }
        }

        [Ignore]
        public List<List<EffectBase>> Effects
        {
            get;
            set;
        }

        #region IAssignedByD2O Members

        public void AssignFields(object d2oObject)
        {
            var itemSet = (ItemSet) d2oObject;
            Id = itemSet.id;
            ItemsCSV = SerializeItems(itemSet.items.Select(entry => (int) entry).ToArray());
            NameId = itemSet.nameId;
            BonusIsSecret = itemSet.bonusIsSecret;
            List<List<EffectBase>> effects = itemSet.effects.Select(entry => entry.Where(subentry => subentry != null).
                                                                                 Select(
                                                                                     subentry =>
                                                                                     EffectManager.Instance.
                                                                                         ConvertExportedEffect(subentry))
                                                                                 .ToList()).ToList();
            EffectsJSON = SerializeEffects(effects);
        }

        #endregion

        #region ISaveIntercepter Members

        public void BeforeSave(bool insert)
        {
            EffectsJSON = SerializeEffects(Effects);
            ItemsCSV = SerializeItems(Items.Select(entry => entry.Id).ToArray());
        }

        #endregion

        public EffectBase[] GetEffects(int itemsCount)
        {
            int index = itemsCount - 1;

            if (Effects == null || Effects.Count <= index || index < 0)
                return new EffectBase[0];

            return Effects[index].ToArray();
        }

        private static string SerializeEffects(List<List<EffectBase>> bonusEffects)
        {
            return bonusEffects.ToJson();
        }

        private static List<List<EffectBase>> DeserializeEffects(string serialized)
        {
            return serialized.FromJson<List<List<EffectBase>>>();
        }

        private string SerializeItems(int[] templateIds)
        {
            return templateIds.ToCSV(",");
        }

        private ItemTemplate[] DeserializeItems(string serialized)
        {
            int[] ids = serialized.FromCSV<int>(",");

            return ids.Select(x => ItemManager.Instance.TryGetTemplate(x)).ToArray();
        }
    }
}