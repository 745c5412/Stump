using System;
using System.Collections.Generic;
using System.Data.Entity.ModelConfiguration;
using System.Linq;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using Stump.Server.WorldServer.Game.Accounts.Startup;

namespace Stump.Server.WorldServer.Database
{
    public class WorldAccountRelator
    {
        public static string FetchQuery = "SELECT * FROM accounts LEFT JOIN accounts_relations ON accounts_relations.AccountId=accounts.Id";

        private WorldAccount m_current;
        public WorldAccount Map(WorldAccount account, AccountRelation relation)
        {
            if (account == null)
                return m_current;

            if (m_current != null && m_current.Id == account.Id)
            {
                m_current.Relations.Add(relation);
                return null;
            }

            var previous = m_current;

            m_current = account;
            m_current.Relations.Add(relation);

            return previous;
        }
    }

    [TableName("accounts")]
    public partial class WorldAccount : IAutoGeneratedRecord
    {
        public WorldAccount()
        {
            Relations = new List<AccountRelation>();
        }

        public int Id
        {
            get;
            set;
        }

        public string Nickname
        {
            get;
            set;
        }

        public DateTime? LastConnection
        {
            get;
            set;
        }

        public string LastIp
        {
            get;
            set;
        }

        public int? ConnectedCharacter
        {
            get;
            set;
        }

        [Ignore]
        public List<AccountRelation> Relations
        {
            get;
            set;
        }

        [Ignore]
        public virtual ICollection<StartupAction> StartupActions
        {
            get;
            set;
        }

        public int LastConnectionTimeStamp
        {
            get { return LastConnection.HasValue ? (int) (DateTime.Now - LastConnection.Value).TotalHours : 0; }
        }

        public StartupAction[] GetStartupActions()
        {
            return StartupActions.Select(entry => new StartupAction(entry)).ToArray();
        }
    }
}