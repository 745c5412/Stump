<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stump.Server.BaseServer</name>
    </assembly>
    <members>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.RegisterWorld(Stump.Server.BaseServer.IPC.WorldServerInformation,System.Int32)">
            <summary>
              Register a game server when he gets online.
            </summary>
            <param name = "rsi"></param>
            <param name = "channelPort"></param>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.UnRegisterWorld(Stump.Server.BaseServer.IPC.WorldServerInformation)">
            <summary>
              Unregister our game server. Called on shutdown process.
            </summary>
            <param name = "rsi"></param>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.ChangeState(Stump.Server.BaseServer.IPC.WorldServerInformation,Stump.DofusProtocol.Enums.ServerStatusEnum)">
            <summary>
            Change Server State
            </summary>
            <param name="wsi"></param>
            <param name="state"></param>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.IncrementConnectedChars(Stump.Server.BaseServer.IPC.WorldServerInformation)">
            <summary>
              Increment the counter of connected characters
            </summary>
            <param name="wsi"></param>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.DecrementConnectedChars(Stump.Server.BaseServer.IPC.WorldServerInformation)">
            <summary>
              Decrement the counter of connected characters
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.PingConnection(Stump.Server.BaseServer.IPC.WorldServerInformation)">
            <summary>
              Ping the remote connection.
              Throws a RemotingException if no Pong was received.
            </summary>
            <returns>Return false if the world server has been disconnected</returns>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.GetAccountRecordByTicket(Stump.Server.BaseServer.IPC.WorldServerInformation,System.String)">
            <summary>
              Get and return an account record with a given ticket.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.GetAccountRecordByNickname(Stump.Server.BaseServer.IPC.WorldServerInformation,System.String)">
            <summary>
              Get and return an account record with a given account name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.ModifyAccountRecordByNickname(Stump.Server.BaseServer.IPC.WorldServerInformation,System.String,Stump.Database.AuthServer.AccountRecord)">
            <summary>
              Get and return an account record with a given account name.
            </summary>
            <returns>success</returns>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.CreateAccountRecord(Stump.Server.BaseServer.IPC.WorldServerInformation,Stump.Database.AuthServer.AccountRecord)">
            <summary>
              Create a new account and cache it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.DeleteAccountRecord(Stump.Server.BaseServer.IPC.WorldServerInformation,System.String)">
            <summary>
              Delete an account and remove it from the cache if necessary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.GetAllAccountsRecords(Stump.Server.BaseServer.IPC.WorldServerInformation)">
            <summary>
              Find and returns all account records existing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.AddAccountCharacter(Stump.Server.BaseServer.IPC.WorldServerInformation,System.UInt32,System.UInt32)">
            <summary>
            Add a new Character to the account
            </summary>
            <param name="wsi"></param>
            <param name="accountid"></param>
            <param name="characterId"></param>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.DeleteAccountCharacter(Stump.Server.BaseServer.IPC.WorldServerInformation,System.UInt32,System.UInt32)">
            <summary>
            Delete a character of the account
            </summary>
            <param name="wsi"></param>
            <param name="accountid"></param>
            <param name="characterId"></param>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.ExceedsDeletedCharactersQuota(System.UInt32)">
            <summary>
            Check if account exceeds the quota of day character deletion
            </summary>
            <param name="wsi"></param>
            <param name="accountid"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.CheckWorldServerSecretKey(Stump.Server.BaseServer.IPC.WorldServerInformation,System.String)">
            <summary>
            Check the world server's secret key
            </summary>
            <param name="wsi"></param>
            <param name="secretKey"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.BanAccount(Stump.Server.BaseServer.IPC.WorldServerInformation,System.UInt32,System.DateTime)">
            <summary>
            Ban an account
            </summary>
            <param name="wsi"></param>
            <param name="accountId"></param>
            <param name="banEndDate"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsAuth.BanIp(Stump.Server.BaseServer.IPC.WorldServerInformation,System.String)">
            <summary>
            Ban an ip
            </summary>
            <param name="wsi"></param>
            <param name="ip"></param>
        </member>
        <member name="F:Stump.Server.BaseServer.Handler.HandlerManager.m_handlers">
            <summary>
              Key : Typeof handled message
              Value : Target method
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Handler.HandlerManager.RegisterAll(System.Reflection.Assembly)">
            <summary>
              Automatically detects and registers all PacketHandlers within the given Assembly
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Handler.HandlerManager.Register(System.Type)">
            <summary>
              Registers all packet handlers defined in the given type.
            </summary>
            <param name = "type">the type to search through for packet handlers</param>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.D2oTool.D2oFile.#ctor(System.String)">
            <summary>
              Create and initialise a new D2o file
            </summary>
            <param name = "name">Path of the file</param>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.D2oTool.D2oFile.ReadObjects``1">
            <summary>
              Get all objects that corresponding to T associated to his index
            </summary>
            <typeparam name = "T">Corresponding class</typeparam>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.D2oTool.D2oFile.ReadObjects``1(System.Boolean)">
            <summary>
              Get all objects that corresponding to T associated to his index
            </summary>
            <typeparam name = "T">Corresponding class</typeparam>
            <param name = "allownulled">True to adding null instead of throwing an exception</param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.D2oTool.D2oFile.ReadObjects">
            <summary>
              Get all objects that corresponding to T associated to his index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.D2oTool.D2oFile.ReadObjects(System.Boolean)">
            <summary>
              Get all objects that corresponding to T associated to his index
            </summary>
            <param name = "allownulled">True to adding null instead of throwing an exception</param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.D2oTool.D2oFile.ReadObject(System.Int32)">
            <summary>
              Get an object from his index
            </summary>
            <param name = "index"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.D2oTool.D2oFile.ReadObject``1(System.Int32)">
            <summary>
              Get an object from his index
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "index"></param>
            <returns></returns>
        </member>
        <member name="F:Stump.Server.BaseServer.ConsoleBase.AskWaiterInterval">
            <summary>
            Define the interval between two condition checks
            when server is asking something to the user by the console
            </summary>
        </member>
        <member name="T:Stump.Server.BaseServer.Commands.ExecuterBase">
            <summary>
              Only used to make SubCommand and CommandBase shorter
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.ServerBase`1.Instance">
            <summary>
              Class singleton
            </summary>
        </member>
        <member name="P:Stump.Server.BaseServer.ServerBase`1.CommandManager">
            <summary>
              Classe de base de l'execution des commandes.
            </summary>
        </member>
        <member name="P:Stump.Server.BaseServer.ServerBase`1.QueueDispatcher">
            <summary>
              Classe de gestion du traitement séquencielle et prioritisé des paquetqs
            </summary>
        </member>
        <member name="P:Stump.Server.BaseServer.ServerBase`1.WorkerManager">
            <summary>
              Classe de Gestion MultiThreading des paquets
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Commands.CommandParameter`1.SetDefaultValue">
            <summary>
              Sets parameter's value to default value
            </summary>
            <returns>False if <see cref="P:Stump.Server.BaseServer.Commands.CommandParameter`1.IsOptional"/> is false or <see cref="P:Stump.Server.BaseServer.Commands.CommandParameter`1.DefaultValue"/> is not assigned</returns>
        </member>
        <member name="M:Stump.Server.BaseServer.Initializing.StageStep.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.D2oTool.D2oClassDefinition.ReadValue``1(System.Int32,System.String)">
            <summary>
              Read a defined field from a class by his index
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "index"></param>
            <param name = "field"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.D2oTool.D2oClassDefinition.ReadValue``1(System.Int32,System.String,``0)">
            <summary>
              Read a defined field from a class by his index
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "index"></param>
            <param name = "field"></param>
            <param name = "defaultValue"></param>
            <returns></returns>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.MessageListener.Host">
            <summary>
            Current server adress
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.MessageListener.Port">
            <summary>
            Server port
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.MessageListener.MaxConcurrentConnections">
            <summary>
            Max number of clients connected
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.MessageListener.MaxPendingConnections">
            <summary>
            Max number of clients waiting for a connection
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.MessageListener.ActiveIPRestriction">
            <summary>
            Enable/Disable IP restriction
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.MessageListener.MaxIPConnexions">
            <summary>
            Max number of clients connected on the same IP
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.MessageListener.BufferSize">
            <summary>
            Buffer size /!\ Advanced users only /!\
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Network.MessageListener.GetSameIPNumber(System.Net.IPAddress)">
            <summary>
            Gets the number of same client .
            </summary>
            <param name="ip">The IP.</param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.MapTool.MapRipper.RipMapFile(System.String,System.String)">
            <summary>
              Rewrite a .map file without superflous data
            </summary>
            <param name = "mapfilePath">The unripped .map file</param>
            <param name = "dest">Where to write the ripped .map file</param>
        </member>
        <member name="F:Stump.Server.BaseServer.Commands.CommandBase.IgnoreCommandCase">
            <summary>
            Enable/Disable case check for server's commands
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Commands.CommandBase.TryGetSubCommand(System.String,Stump.Server.BaseServer.Commands.SubCommand@)">
            <summary>
              Try to get a SubCommand with its name.
            </summary>
            <param name = "subcmd">requested subcommand name</param>
            <param name = "result">Out the requested subcommand</param>
            <returns>if the requested subcommand exists.</returns>
        </member>
        <member name="T:Stump.Server.BaseServer.Settings">
            <summary>
              Global settings defined by the config file
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Settings.PluginsDir">
            <summary>
            Path to 'Plugins' folder
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Settings.EnableBenchmarking">
            <summary>
            Enable/Disable perfomances tracing
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.WorkerManager.AutoWorkerNumber">
            <summary>
              Define worker numbers by processor count.
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.WorkerManager.WorkerThreadNumber">
            <summary>
              Number of workers if AutoWorkerNumber is false
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Network.WorkerManager.#ctor(Stump.Server.BaseServer.Network.QueueDispatcher,Stump.Server.BaseServer.Handler.HandlerManager)">
            <summary>
              New instance of WorkerManager
            </summary>
            <param name = "workerNbr"></param>
        </member>
        <member name="M:Stump.Server.BaseServer.Network.WorkerManager.AddWorker(System.Int32)">
            <summary>
              Add a Worker
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Network.WorkerManager.RemoveWorker(System.Int32)">
            <summary>
              Remove a Worker
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Network.WorkerManager.SetWorkerNumber(System.Int32)">
            <summary>
              Define Worker number
            </summary>
            <param name = "number">number of Worker to set</param>
        </member>
        <member name="M:Stump.Server.BaseServer.Network.WorkerManager.AdaptWorkerNumberWithProcessor">
            <summary>
              AutoAdapt Worker number with number of processor cores
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Network.WorkerManager.RemoveSleepedWorker">
            <summary>
              Stop Sleeped worker and return number of stopped Workers
            </summary>
            <returns>number of stopped Worker</returns>
        </member>
        <member name="P:Stump.Server.BaseServer.Network.WorkerManager.WorkerList">
            <summary>
              List of Active Worker
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.ClientVersion.Severity">
            <summary>
              Define the severity of the client version checking. Set to Light/NoCheck if you have any bugs with it.
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.ClientVersion.VersionRequired">
            <summary>
            Version for the client
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.ClientVersion.ActualVersion">
            <summary>
            Actual version
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Network.ClientVersion.RequiredVersion">
            <summary>
            Required version
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Initializing.StageManager.WaitTime">
            <summary>
            Time to wait a task after it's has been started. (ms)
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Initializing.StageManager.StagesSteps">
            <summary>
            Array for our differents stages.
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Commands.TriggerBase.Reply(System.String)">
            <summary>
              Replies accordingly with the given text.
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Network.BaseClient.Disconnect">
            <summary>
              Disconnect the Client. Cannot reuse the socket.
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Network.BaseClient.DisconnectLater(System.Int32)">
            <summary>
              Disconnect the Client after a time
            </summary>
            <param name = "timeToWait"></param>
        </member>
        <member name="F:Stump.Server.BaseServer.Database.DatabaseAccessor.m_loginHost">
            <remarks>
            </remarks>
        </member>
        <member name="F:Stump.Server.BaseServer.Database.DatabaseAccessor.m_databaseName">
            <summary>
            </summary>
        </member>
        <member name="P:Stump.Server.BaseServer.Database.DatabaseAccessor.LoginUser">
            <summary>
            Database user
            </summary>
        </member>
        <member name="P:Stump.Server.BaseServer.Database.DatabaseAccessor.LoginPassword">
            <summary>
            Database password
            </summary>
        </member>
        <member name="P:Stump.Server.BaseServer.Database.DatabaseAccessor.LoginHost">
            <summary>
            Database host
            </summary>
        </member>
        <member name="P:Stump.Server.BaseServer.Database.DatabaseAccessor.DatabaseName">
            <summary>
            Database name to connect to
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Data.DataLoader.DataPath">
            <summary>
            Path to 'data' folder
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Data.DataLoader.D2ODir">
            <summary>
            Name of d2o folder in 'data' folder
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Data.DataLoader.I18NDir">
            <summary>
            Name of i18n folder in 'data' folder
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.Data.DataLoader.I18NFileName">
            <summary>
            Name of the i18n file used by the server
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.DataLoader.LoadData``1">
            <summary>
              Load a D2O file with a class constraint
            </summary>
            <typeparam name = "T">Constraint class</typeparam>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.DataLoader.LoadData``1(System.Boolean)">
            <summary>
              Load a D2O file with a class constraint
            </summary>
            <typeparam name = "T">Constraint class</typeparam>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.DataLoader.LoadData(System.String)">
            <summary>
              Load a D2O file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.BaseServer.Data.DataLoader.LoadData(System.String,System.Boolean)">
            <summary>
              Load a D2O file
            </summary>
            <returns></returns>
        </member>
        <member name="F:Stump.Server.BaseServer.IPC.WorldServerInformation.Address">
            <summary>
              World address.
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.IPC.WorldServerInformation.Id">
            <summary>
              Internally assigned unique Id of this World.
            </summary>
        </member>
        <member name="F:Stump.Server.BaseServer.IPC.WorldServerInformation.Name">
            <summary>
              World name.
            </summary>
        </member>
        <member name="T:Stump.Server.BaseServer.Definitions">
            <summary>
              Contains hard-coded data
            </summary>
        </member>
        <member name="M:Stump.Server.BaseServer.IPC.IRemoteOperationsWorld.DisconnectConnectedAccount(Stump.Database.AccountRecord)">
            <summary>
              Disconnect client who use the given account
            </summary>
            <param name = "account"></param>
        </member>
    </members>
</doc>
