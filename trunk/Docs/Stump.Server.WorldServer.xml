<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stump.Server.WorldServer</name>
    </assembly>
    <members>
        <member name="P:Stump.Server.WorldServer.WorldServer.ServerId">
            <summary>
              ID of current world server
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.WorldServer.ServerName">
            <summary>
              Name of current world server
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.WorldServer.ServerAddress">
            <summary>
              Adress of current world server
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.WorldServer.ServerPort">
            <summary>
              Port of current world server
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.TimeLine.UpdateToNextFighter">
            <summary>
              Change the current fighter and select the next fighter on the timeline
            </summary>
            <returns></returns>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.ILocable.Position">
            <summary>
              Representation of Entity's World Position
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.ILocableIdentified.Id">
            <summary>
              Id of this entity.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.INamedEntity.Name">
            <summary>
              The name of this character.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Entities.Entity.#ctor(System.Int32)">
            <summary>
              Constructor
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.Entity.Id">
            <summary>
              The Id of this character.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.Entity.Position">
            <summary>
              Representation of Entity's World Position
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.Entity.Name">
            <summary>
              The name of this entity.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.ILivingEntity.Level">
            <summary>
              Set or get Level of the character.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.ILivingEntity.Spells">
            <summary>
              Spell container of this entity.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Entities.IMovable.Move(Stump.Server.WorldServer.Global.Pathfinding.MovementPath)">
            <summary>
              Move the entity.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Entities.IMovable.MoveInstant(Stump.Server.WorldServer.Global.VectorIsometric)">
            <summary>
              Teleport instantly the entity.
            </summary>
            <param name="to"></param>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.IMovable.IsMoving">
            <summary>
              Indicate or set if entity is moving.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.LivingEntity.Spells">
            <summary>
              Spell container of this entity.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Effects.EffectManager.ConvertExportedEffect(Stump.DofusProtocol.D2oClasses.EffectInstance)">
            <summary>
              D2O Effect class to stump effect class
            </summary>
            <param name = "effect"></param>
            <returns></returns>
        </member>
        <member name="F:Stump.Server.WorldServer.Effects.EffectManager.RandomablesEffects">
            <summary>
              Effects that are random when a new item is generated
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Breeds.BaseBreed.StartMap">
            <summary>
              This is where you begin.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Breeds.BaseBreed.StartCellId">
            <summary>
              This is where you begin.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Breeds.BaseBreed.Name">
            <summary>
              We read BreedEnum Name from our source's filename directly.
              We could also read from our BreedEnum Enum.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.AddSpell(System.UInt32)">
            <summary>
              Teaches a new spell to the character.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.AddSpell(Stump.DofusProtocol.Enums.SpellIdEnum)">
            <summary>
              Teaches a new spell to the character.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.AddSpells(Stump.Server.WorldServer.Spells.Spell[])">
            <summary>
              Teaches new spells to the character.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.AddSpell(Stump.Server.WorldServer.Spells.Spell)">
            <summary>
              Teaches a new spell to the character.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.OnAdd(Stump.Server.WorldServer.Spells.SpellCollection,Stump.Server.WorldServer.Spells.Spell)">
            <summary>
              Happens when a spell has been added to collection.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.AddSpell(System.Collections.Generic.IEnumerable{Stump.DofusProtocol.Enums.SpellIdEnum})">
            <summary>
              Add a range of spells to this character.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.AddSpell(Stump.DofusProtocol.Enums.SpellIdEnum[])">
            <summary>
              Add a range of spells to this character.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.AddSpell(System.Collections.Generic.IEnumerable{Stump.Server.WorldServer.Spells.Spell})">
            <summary>
              Add a range of spells to this character.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.Contains(System.UInt32)">
            <summary>
              Check if collection contains given spell id.
            </summary>
            <param name = "id"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.Contains(Stump.DofusProtocol.Enums.SpellIdEnum)">
            <summary>
              Check if collection contains given spell id.
            </summary>
            <param name = "id"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.Clear">
            <summary>
              Clear Spells Collections. Empty the entire collection.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.Replace(Stump.DofusProtocol.Enums.SpellIdEnum,Stump.DofusProtocol.Enums.SpellIdEnum)">
            <summary>
              Only works if you have 2 valid spell ids and oldSpellId already exists.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Spells.SpellCollection.Replace(Stump.Server.WorldServer.Spells.Spell,Stump.Server.WorldServer.Spells.Spell)">
            <summary>
              Replaces or (if newSpell == null) removes oldSpell; does nothing if oldSpell doesn't exist.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Spells.SpellCollection.Count">
            <summary>
              The amount of Spells in this Collection
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Spells.SpellCollection.HasSpells">
            <summary>
              Determines if there are spells in this collection. (At least one)
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Items.Item.IsStackableWith(Stump.Server.WorldServer.Items.Item)">
            <summary>
              Check if the given item can be stacked with the actual item (without compare his position)
            </summary>
            <param name = "compared"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Items.Item.MustStackWith(Stump.Server.WorldServer.Items.Item)">
            <summary>
              Check if the given item must be stacked with the actual item
            </summary>
            <param name = "compared"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Entities.IEntityContainer.FindAll">
            <summary>
            Find all entities contained in this set. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Entities.IEntityContainer.Get(System.Int64)">
            <summary>
            Get an entity with the given id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.IEntityContainer.Entities">
            <summary>
            Thread Safe set containing characters.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Global.WorldSpace.Sync">
            <summary>
              Synchronization object to avoid behaviors since we are in a multi threaded environment.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.WorldSpace.#ctor">
            <summary>
              Constructor
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.WorldSpace.FindAll">
            <summary>
              Find and returns all entities in this world space.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.WorldSpace.Get(System.Int64)">
            <summary>
              Get an entity with the given id.
            </summary>
            <param name = "id"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.WorldSpace.Get``1(System.Int64)">
            <summary>
              Get an entity with the given id.
            </summary>
            <param name = "id"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.WorldSpace.CallOnAllCharacters(System.Action{Stump.Server.WorldServer.Entities.Character})">
            <summary>
              Execute an action of every characters in this world space.
            </summary>
            <param name = "action"></param>
        </member>
        <member name="P:Stump.Server.WorldServer.Global.WorldSpace.Type">
            <summary>
              Type of this World space.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Entities.Character.#ctor(Stump.Database.CharacterRecord,Stump.Server.WorldServer.WorldClient)">
            <summary>
              Constructor called when a character has been successfully selected.
            </summary>
            <param name = "record"></param>
            <param name = "client"></param>
        </member>
        <member name="M:Stump.Server.WorldServer.Entities.Character.Send(Stump.DofusProtocol.Messages.Message)">
            <summary>
              Send a packet to this character.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Entities.Character.LogIn">
            <summary>
              Spawn the character on the map. It can be called once.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Entities.Character.SaveNow">
            <summary>
              Save character's fields to database.
              This is not a Save() from A-R, we don't want to Save a new character but update his data.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Entities.Character.AddSpell(Stump.Server.WorldServer.Spells.Spell)">
            <summary>
              Add a new freshly created spell to this character.
              It's also create a record.
            </summary>
            <param name = "spell"></param>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.Character.Client">
            <summary>
              Client associated with the character.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.Character.Record">
            <summary>
              Record corresponding this character.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.Character.BreedId">
            <summary>
              Breed of this character.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.Character.Sex">
            <summary>
              Sex of this character.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.Character.Kamas">
            <summary>
              Amount of kamas owned by this character.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.Character.Inventory">
            <summary>
              Character's inventory
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.Character.NextMap">
            <summary>
              Temporary properties used to know the next map during a map transition
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.Character.EmoteId">
            <summary>
              The emoteId of the current emote played. (0 = null)
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Groups.GroupManager.CreateGroup(Stump.Server.WorldServer.Groups.IGroup)">
            <summary>
              Add the group
            </summary>
            <param name = "grp"></param>
            <returns>groupId</returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.Maps.MapPoint.InitializeStaticGrid">
            <summary>
            Initialize a static 2D plan that is used as reference to convert a cell to a (X,Y) point
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Global.Maps.MapPoint.Map">
            <summary>
            Get the linked map to this point
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Entities.Monster.Monsters">
            <summary>
              Our global array containing every monsters of our world.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Global.World.MessageOfTheDay">
            <summary>
            Welcome message
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Global.World.MaxCharacterSlot">
            <summary>
              Maximum number of characters you can create/store in your account
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Global.World.m_charactersId">
            <summary>
              Character's Map where you retrieve a character by his Id.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Global.World.m_charactersName">
            <summary>
              Character's Map where you retrieve a character by his name.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Global.World.m_taskPool">
            <summary>
              Task pool which will handle and execute all messages given.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.World.Save">
            <summary>
              Save all characters in world.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.World.GetCharacterByPattern(System.String)">
            <summary>
            Get a character by a search pattern. *account = current character used by account, name = character by his name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.World.GetCharacterByPattern(Stump.Server.WorldServer.Entities.Character,System.String)">
            <summary>
            Get a character by a search pattern. * = caller, *(account) = current character used by account, name = character by his name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.World.AddCharacter(Stump.Server.WorldServer.Entities.Character)">
            <summary>
              Add a character to the world.
            </summary>
            <param name = "chr">the character to add</param>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.World.RemoveCharacter(Stump.Server.WorldServer.Entities.Character)">
            <summary>
              Removes a character from the world manager.
            </summary>
            <param name = "chr">the character to stop tracking</param>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.World.GetMap(System.Int32)">
            <summary>
              Get map with the given map id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.World.GetMap(System.UInt32)">
            <summary>
              Get map with the given map id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.World.GetMaps(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
              Get maps with the given map's id list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stump.Server.WorldServer.Definitions">
            <summary>
              Contains hard-coded data
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Global.Region.m_charactercount">
            <summary>
              Numbers of characters in this region. (Stats purpose)
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.Region.#ctor">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.Region.AddEntity(Stump.Server.WorldServer.Entities.Entity)">
            <summary>
              Called when a entity enter this region. (Actually only characters)
            </summary>
            <param name = "entity"></param>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.Region.Start">
            <summary>
              Start region's context.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.FightManager.RemoveFight(Stump.Server.WorldServer.Fights.Fight)">
            <summary>
              Remove the fight
            </summary>
            <param name = "fight"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.FightManager.CreateFight(Stump.Server.WorldServer.Fights.Fight)">
            <summary>
              Create the fight
            </summary>
            <param name = "fight"></param>
            <returns>fightId</returns>
        </member>
        <member name="F:Stump.Server.WorldServer.IPC.IpcAccessor.ReconnectDelay">
            <summary>
              Delay in seconds where we should retry connecting to remote server.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.IPC.IpcAccessor.PingDelay">
            <summary>
            Delay for a ping check
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.IPC.IpcAccessor.IpcAuthAdress">
            <summary>
            IPC server adress
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.IPC.IpcAccessor.IpcAuthPort">
            <summary>
            IPC authentification port
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.IPC.IpcAccessor.IpcWorldPort">
            <summary>
            IPC world port
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.IPC.IpcAccessor.IpcSecretKey">
            <summary>
            Secret key to use to confirm World Server access
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.IPC.IpcAccessor.m_synclock">
            <summary>
              Object to sync up when needed.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.IPC.IpcAccessor.m_disposing">
            <summary>
              Indicate if we are disposing or not.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.IPC.IpcAccessor.Connect">
            <summary>
              Actually attempt to connect to remote server and retrieve a
              proxy object.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.IPC.IpcAccessor.Start">
            <summary>
              Actually start to connect to remote server.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.IPC.IpcAccessor.MaintainConnection">
            <summary>
              Running on his own context, we ping regularly here remote server.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.IPC.IpcAccessor.Disconnect">
            <summary>
              Disconnect this client from remote server.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.IPC.IpcAccessor.NotifyConnectionLost">
            <summary>
              Notify to WorldServer instance that we lost connection to remote server.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.StatsData.TotalSafe">
            <summary>
              Value can't be lesser than 0
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.StatsHealth.Total">
            <summary>
              Addition of values
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.StatsHealth.TotalSafe">
            <summary>
              Addition of values
            </summary>
            <remarks>
              Value can't be lesser than 0
            </remarks>
        </member>
        <member name="P:Stump.Server.WorldServer.Entities.StatsHealth.TotalMax">
            <summary>
              Additions of values without using damages taken;
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Data.NpcLoader.NpcsDir">
            <summary>
              Name of monsters folder
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Spells.SpellManager.Spells">
            <summary>
              All spells handled by manager.
            </summary>
        </member>
        <member name="T:Stump.Server.WorldServer.Settings">
            <summary>
              Global settings defined by the config file
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Settings.ContentPath">
            <summary>
            Path of content folder
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Settings.StaticPath">
            <summary>
            Path of static folder
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Data.MonsterLoader.MapsDir">
            <summary>
            Name of monsters folder
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Handlers.BasicHandler.SendTextInformationMessage(Stump.Server.WorldServer.WorldClient,System.UInt32,System.UInt32,System.String[])">
            <summary>
            </summary>
            <param name = "client"></param>
            <param name = "msgType"></param>
            <param name = "msgId"></param>
            <param name = "arguments"></param>
            <remarks>
              Message id = <paramref name = "msgType" /> * 10000 + <paramref name = "msgId" />
            </remarks>
        </member>
        <member name="E:Stump.Server.WorldServer.Global.Maps.CellData.CellReached">
            <summary>
            Occurs when the cell has been reached.
            </summary>
        </member>
        <member name="T:Stump.Server.WorldServer.Global.VectorIsometric">
            <summary>
            Represent a vector on a 2D isometric plan.
            </summary>
        </member>
        <member name="T:Stump.Server.WorldServer.Items.Inventory">
            <summary>
              Represent the Inventory of a character
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Groups.Group`1.MaxMemberCount">
            <summary>
              Maximum number of characters that can be in a same group.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Groups.Group`1.MinGroupMemberCount">
            <summary>
              Minimum number of characters needed to be/create a group.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Groups.Group`1.m_leaderId">
            <summary>
              Id of the leader of the group
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Groups.Group`1.m_syncLock">
            <summary>
              Synchronization tool.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Groups.Group`1.#ctor">
            <summary>
              Constructor
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Groups.Group`1.AddMember(`0)">
            <summary>
              Add a new member to this group.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Groups.Group`1.RemoveMember(`0)">
            <summary>
              Remove member from this Group.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Groups.FightGroup.AddMember(Stump.Server.WorldServer.Entities.LivingEntity)">
            <summary>
              Add a new member to this group.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Breeds.BreedManager.AvailableBreeds">
            <summary>
            List of available breeds
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Breeds.BreedManager.BaseBreeds">
            <summary>
              Array containing all breeds.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Breeds.BreedManager.m_breedsData">
            <summary>
              List containing every data for each breed.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Breeds.BreedManager.LoadBreedsData">
            <summary>
              Load breeds data from database.
              Called once on World Initialization process.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Breeds.BreedManager.InitBreed(Stump.Server.WorldServer.Breeds.BaseBreed)">
            <summary>
              Initialize a breed with initial data.
            </summary>
            <param name = "breed">breed to initialize</param>
        </member>
        <member name="T:Stump.Server.WorldServer.Skills.SkillUse">
            <summary>
            Skill for all interactive object without specifical actions like a door
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Items.ItemManager.ItemGuidGenerator">
            <summary>
              Used to get the next unused item guid
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Items.ItemManager.m_itemTemplates">
            <summary>
              Array containing every Item template loaded from database.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Items.ItemManager.m_itemTypes">
            <summary>
              Array containing every Item Types in the game
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Items.ItemManager.GetItemsByPattern(System.String,System.Collections.Generic.IEnumerable{Stump.Server.WorldServer.Items.ItemTemplate})">
            <summary>
            Found an item template contains in a given list with a pattern
            </summary>
            <remarks>
            When @ precede the pattern the case is ignored
            * is a joker, it can be placed at the begin or at the end or both
            it means that characters are ignored
            
            Note : We use RegExp for the pattern. '*' are remplaced by '[\w\d_]*'
            </remarks>
            <example>
            pattern :   @Ab*
            list :  abc
                    Abd
                    ace
            
            returns : abc and Abd
            </example>
        </member>
        <member name="M:Stump.Server.WorldServer.Items.ItemManager.AddItem(Stump.Server.WorldServer.Items.Item)">
            <summary>
              Create an item and add it into the database
            </summary>
            <param name = "item"></param>
        </member>
        <member name="M:Stump.Server.WorldServer.Items.ItemManager.LoadItem(Stump.Server.WorldServer.Entities.LivingEntity,Stump.Database.CharacterItemRecord)">
            <summary>
              Load an item and register it into the cache
            </summary>
            <param name = "owner"></param>
            <param name = "record"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Items.ItemManager.UnLoadItem(System.Int64)">
            <summary>
              Unregister an item from the cache
            </summary>
            <param name = "guid"></param>
        </member>
        <member name="M:Stump.Server.WorldServer.Items.ItemManager.UnLoadItem(System.Int64[])">
            <summary>
              Unregister items from the cache
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Data.MapLoader.MapsDir">
            <summary>
              Name of maps folder
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Data.MapLoader.LoadMaps">
            <summary>
              Load ripped maps from maps directory
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.WorldConsole.CommandPreffix">
            <summary>
            Prefix used for server's commands
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Fights.Fight.TurnTime">
            <summary>
              Delay for player's turn
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Fights.Fight.TurnEndTimeOut">
            <summary>
              Delay before force turn to end
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.#ctor(Stump.Server.WorldServer.Groups.FightGroup,Stump.Server.WorldServer.Groups.FightGroup,Stump.DofusProtocol.Enums.FightTypeEnum)">
            <summary>
              Create a fight with source as Team 0 and target as Team 1 and not started yet.
            </summary>
            <param name = "source">A first group</param>
            <param name = "target">An other group</param>
            <param name = "fightType">Fight type</param>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.StartingFight">
            <summary>
              Starting a fight, from map to preparation time in fight
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.PrepareFight(Stump.Server.WorldServer.Entities.Character,Stump.Server.WorldServer.Groups.FightGroup)">
            <summary>
              Prepare to Fight method, Showing cells and characters.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.CancelFight(System.Int32)">
            <summary>
              Cancel a fight by remove it
            </summary>
            <param name = "groupId">Group that have cancelled the fight</param>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.OnSetReady(Stump.Server.WorldServer.Groups.FightGroupMember,System.Boolean)">
            <summary>
              Set the ready state of a character
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.CanChangePosition(Stump.Server.WorldServer.Groups.FightGroupMember,System.UInt16)">
            <summary>
              Check if a character can change position (before fight is started).
            </summary>
            <param name = "fighter"></param>
            <param name = "cellId">The cellId wanted</param>
            <returns>If change is possible</returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.StartFight">
            <summary>
              Start a fight, in combat time.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.UseSpell(Stump.Server.WorldServer.Groups.FightGroupMember,System.Int32,System.Int32)">
            <summary>
              Use the required spell by the fighter.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.SetFightState(Stump.Server.WorldServer.Fights.FightState)">
            <summary>
              Change the actual state of the fight
            </summary>
            <param name = "state"></param>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.GetAlivesIds">
            <summary>
              Gets the ids of alive entites.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.GetDeadsIds">
            <summary>
              Gets the ids of dead entites.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.GetGroup(System.Int32)">
            <summary>
              Get a FightGroup in this fight by his groupId.
            </summary>
            <param name = "groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.GetGroupByEntity(System.Int32)">
            <summary>
              Get the FightGroup where the entity is in this fight
            </summary>
            <param name = "entityId"></param>
            <returns>The fightGroup where the entity is in this fight, if is not in both groups, return null</returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.GetGroupByCharacter(System.Int32)">
            <summary>
              Get the FightGroup where the character is in this fight
            </summary>
            <param name = "chrId">The character's id of the fighter</param>
            <returns>The fightGroup where the character is in this fight, if is not in both groups, return null</returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.GetGroupMemberByCharacter(System.Int32)">
            <summary>
              Get the FightGroupMember corresponding to Character's Id.
            </summary>
            <param name = "characterId">The character's id of the fighter</param>
            <returns>The fightGroupMember of the character, else null</returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.CallOnAllCharacters(System.Action{Stump.Server.WorldServer.Entities.Character})">
            <summary>
              Execute an action on every characters in this fight.
            </summary>
            <param name = "action"></param>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.GetAllEntities">
            <summary>
              Get all entities contains in both sides groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stump.Server.WorldServer.Fights.Fight.GetAllCharacters">
            <summary>
              Get all characters contains in both sides groups
            </summary>
            <returns></returns>
        </member>
        <member name="P:Stump.Server.WorldServer.Fights.Fight.Started">
            <summary>
              Combat is started or in prepare.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Fights.Fight.SourceGroup">
            <summary>
              FightGroup of the sourceGroupe (also named challengers)
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Fights.Fight.TargetGroup">
            <summary>
              FightGroup of the targetGroup (also named defenders)
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Fights.Fight.FighterPlaying">
            <summary>
              Get the fighter who is playing his turn
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Fights.Fight.AgeBonus">
            <summary>
              The age bonus (stars) of the fight.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Fights.Fight.Duration">
            <summary>
              Duration of the fight.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Fights.Fight.Id">
            <summary>
              FightId of this fight
            </summary>
        </member>
        <member name="T:Stump.Server.WorldServer.Global.Maps.Map">
            <summary>
              Represents a map where entities can walk for instance.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.Maps.Map.#ctor">
            <summary>
              Constructor
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.Maps.Map.GetCellAfterChangeMap(System.UInt16,Stump.DofusProtocol.Enums.MapNeighbour)">
            <summary>
              Calculate which cell our character will walk on once map changed.
            </summary>
        </member>
        <member name="M:Stump.Server.WorldServer.Global.Maps.Map.CallOnAllCharactersWithoutFighters(System.Action{Stump.Server.WorldServer.Entities.Character})">
            <summary>
              Execute an action of every characters in this world space included fight's members.
            </summary>
            <param name = "action"></param>
        </member>
        <member name="P:Stump.Server.WorldServer.Global.Maps.Map.Version">
            <summary>
              Map version of this map.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Global.Maps.Map.RelativeId">
            <summary>
              Relative id of this map.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Global.Maps.Map.MapType">
            <summary>
              Type of this map.
            </summary>
        </member>
        <member name="P:Stump.Server.WorldServer.Global.Maps.Map.ZoneId">
            <summary>
              Zone Id which owns this map.
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Chat.ChatManager.CommandPrefix">
            <summary>
            Prefix used for chat commands
            </summary>
        </member>
        <member name="F:Stump.Server.WorldServer.Chat.ChatManager.ChatHandlers">
            <summary>
              Chat handler for each channel Id.
            </summary>
        </member>
        <member name="T:Stump.Server.WorldServer.Chat.ChatManager.ChatParserDelegate">
            <summary>
              Delegate for parsing incomming in game messages.
            </summary>
        </member>
    </members>
</doc>
