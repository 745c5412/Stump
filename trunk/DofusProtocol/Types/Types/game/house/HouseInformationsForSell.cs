// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'HouseInformationsForSell.xml' the '14/06/2011 11:32:49'
using System;
using Stump.Core.IO;

namespace Stump.DofusProtocol.Types
{
	public class HouseInformationsForSell
	{
		public const uint Id = 221;
		public short TypeId
		{
			get
			{
				return 221;
			}
		}
		
		public int modelId;
		public string ownerName;
		public bool ownerConnected;
		public short worldX;
		public short worldY;
		public short subAreaId;
		public byte nbRoom;
		public byte nbChest;
		public int[] skillListIds;
		public bool isLocked;
		public int price;
		
		public HouseInformationsForSell()
		{
		}
		
		public HouseInformationsForSell(int modelId, string ownerName, bool ownerConnected, short worldX, short worldY, short subAreaId, byte nbRoom, byte nbChest, int[] skillListIds, bool isLocked, int price)
		{
			this.modelId = modelId;
			this.ownerName = ownerName;
			this.ownerConnected = ownerConnected;
			this.worldX = worldX;
			this.worldY = worldY;
			this.subAreaId = subAreaId;
			this.nbRoom = nbRoom;
			this.nbChest = nbChest;
			this.skillListIds = skillListIds;
			this.isLocked = isLocked;
			this.price = price;
		}
		
		public virtual void Serialize(IDataWriter writer)
		{
			writer.WriteInt(modelId);
			writer.WriteUTF(ownerName);
			writer.WriteBoolean(ownerConnected);
			writer.WriteShort(worldX);
			writer.WriteShort(worldY);
			writer.WriteShort(subAreaId);
			writer.WriteByte(nbRoom);
			writer.WriteByte(nbChest);
			writer.WriteUShort((ushort)skillListIds.Length);
			for (int i = 0; i < skillListIds.Length; i++)
			{
				writer.WriteInt(skillListIds[i]);
			}
			writer.WriteBoolean(isLocked);
			writer.WriteInt(price);
		}
		
		public virtual void Deserialize(IDataReader reader)
		{
			modelId = reader.ReadInt();
			if ( modelId < 0 )
			{
				throw new Exception("Forbidden value on modelId = " + modelId + ", it doesn't respect the following condition : modelId < 0");
			}
			ownerName = reader.ReadUTF();
			ownerConnected = reader.ReadBoolean();
			worldX = reader.ReadShort();
			if ( worldX < -255 || worldX > 255 )
			{
				throw new Exception("Forbidden value on worldX = " + worldX + ", it doesn't respect the following condition : worldX < -255 || worldX > 255");
			}
			worldY = reader.ReadShort();
			if ( worldY < -255 || worldY > 255 )
			{
				throw new Exception("Forbidden value on worldY = " + worldY + ", it doesn't respect the following condition : worldY < -255 || worldY > 255");
			}
			subAreaId = reader.ReadShort();
			if ( subAreaId < 0 )
			{
				throw new Exception("Forbidden value on subAreaId = " + subAreaId + ", it doesn't respect the following condition : subAreaId < 0");
			}
			nbRoom = reader.ReadByte();
			nbChest = reader.ReadByte();
			int limit = reader.ReadUShort();
			skillListIds = new int[limit];
			for (int i = 0; i < limit; i++)
			{
				skillListIds[i] = reader.ReadInt();
			}
			isLocked = reader.ReadBoolean();
			price = reader.ReadInt();
			if ( price < 0 )
			{
				throw new Exception("Forbidden value on price = " + price + ", it doesn't respect the following condition : price < 0");
			}
		}
	}
}
