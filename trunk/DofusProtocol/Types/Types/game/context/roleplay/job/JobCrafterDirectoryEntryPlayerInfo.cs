// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'JobCrafterDirectoryEntryPlayerInfo.xml' the '14/06/2011 11:32:47'
using System;
using Stump.BaseCore.Framework.IO;

namespace Stump.DofusProtocol.Types
{
	public class JobCrafterDirectoryEntryPlayerInfo
	{
		public const uint Id = 194;
		public short TypeId
		{
			get
			{
				return 194;
			}
		}
		
		public int playerId;
		public string playerName;
		public byte alignmentSide;
		public byte breed;
		public bool sex;
		public bool isInWorkshop;
		public short worldX;
		public short worldY;
		public int mapId;
		public short subareaId;
		
		public JobCrafterDirectoryEntryPlayerInfo()
		{
		}
		
		public JobCrafterDirectoryEntryPlayerInfo(int playerId, string playerName, byte alignmentSide, byte breed, bool sex, bool isInWorkshop, short worldX, short worldY, int mapId, short subareaId)
		{
			this.playerId = playerId;
			this.playerName = playerName;
			this.alignmentSide = alignmentSide;
			this.breed = breed;
			this.sex = sex;
			this.isInWorkshop = isInWorkshop;
			this.worldX = worldX;
			this.worldY = worldY;
			this.mapId = mapId;
			this.subareaId = subareaId;
		}
		
		public virtual void Serialize(IDataWriter writer)
		{
			writer.WriteInt(playerId);
			writer.WriteUTF(playerName);
			writer.WriteByte(alignmentSide);
			writer.WriteByte(breed);
			writer.WriteBoolean(sex);
			writer.WriteBoolean(isInWorkshop);
			writer.WriteShort(worldX);
			writer.WriteShort(worldY);
			writer.WriteInt(mapId);
			writer.WriteShort(subareaId);
		}
		
		public virtual void Deserialize(IDataReader reader)
		{
			playerId = reader.ReadInt();
			if ( playerId < 0 )
			{
				throw new Exception("Forbidden value on playerId = " + playerId + ", it doesn't respect the following condition : playerId < 0");
			}
			playerName = reader.ReadUTF();
			alignmentSide = reader.ReadByte();
			breed = reader.ReadByte();
			if ( breed < (byte)Enums.PlayableBreedEnum.Feca || breed > (byte)Enums.PlayableBreedEnum.Zobal )
			{
				throw new Exception("Forbidden value on breed = " + breed + ", it doesn't respect the following condition : breed < (byte)Enums.PlayableBreedEnum.Feca || breed > (byte)Enums.PlayableBreedEnum.Zobal");
			}
			sex = reader.ReadBoolean();
			isInWorkshop = reader.ReadBoolean();
			worldX = reader.ReadShort();
			if ( worldX < -255 || worldX > 255 )
			{
				throw new Exception("Forbidden value on worldX = " + worldX + ", it doesn't respect the following condition : worldX < -255 || worldX > 255");
			}
			worldY = reader.ReadShort();
			if ( worldY < -255 || worldY > 255 )
			{
				throw new Exception("Forbidden value on worldY = " + worldY + ", it doesn't respect the following condition : worldY < -255 || worldY > 255");
			}
			mapId = reader.ReadInt();
			if ( mapId < 0 )
			{
				throw new Exception("Forbidden value on mapId = " + mapId + ", it doesn't respect the following condition : mapId < 0");
			}
			subareaId = reader.ReadShort();
			if ( subareaId < 0 )
			{
				throw new Exception("Forbidden value on subareaId = " + subareaId + ", it doesn't respect the following condition : subareaId < 0");
			}
		}
	}
}
