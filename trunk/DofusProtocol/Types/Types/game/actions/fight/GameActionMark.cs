// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'GameActionMark.xml' the '24/06/2011 12:04:57'
using System;
using Stump.Core.IO;

namespace Stump.DofusProtocol.Types
{
	public class GameActionMark
	{
		public const uint Id = 351;
		public virtual short TypeId
		{
			get
			{
				return 351;
			}
		}
		
		public int markAuthorId;
		public int markSpellId;
		public short markId;
		public byte markType;
		public Types.GameActionMarkedCell[] cells;
		
		public GameActionMark()
		{
		}
		
		public GameActionMark(int markAuthorId, int markSpellId, short markId, byte markType, Types.GameActionMarkedCell[] cells)
		{
			this.markAuthorId = markAuthorId;
			this.markSpellId = markSpellId;
			this.markId = markId;
			this.markType = markType;
			this.cells = cells;
		}
		
		public virtual void Serialize(IDataWriter writer)
		{
			writer.WriteInt(markAuthorId);
			writer.WriteInt(markSpellId);
			writer.WriteShort(markId);
			writer.WriteByte(markType);
			writer.WriteUShort((ushort)cells.Length);
			for (int i = 0; i < cells.Length; i++)
			{
				cells[i].Serialize(writer);
			}
		}
		
		public virtual void Deserialize(IDataReader reader)
		{
			markAuthorId = reader.ReadInt();
			markSpellId = reader.ReadInt();
			if ( markSpellId < 0 )
			{
				throw new Exception("Forbidden value on markSpellId = " + markSpellId + ", it doesn't respect the following condition : markSpellId < 0");
			}
			markId = reader.ReadShort();
			markType = reader.ReadByte();
			int limit = reader.ReadUShort();
			cells = new Types.GameActionMarkedCell[limit];
			for (int i = 0; i < limit; i++)
			{
				cells[i] = new Types.GameActionMarkedCell();
				cells[i].Deserialize(reader);
			}
		}
	}
}
