// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'SetUpdateMessage.xml' the '15/06/2011 01:39:07'
using System;
using Stump.BaseCore.Framework.IO;

namespace Stump.DofusProtocol.Messages
{
	public class SetUpdateMessage : Message
	{
		public const uint Id = 5503;
		public override uint MessageId
		{
			get
			{
				return 5503;
			}
		}
		
		public short setId;
		public short[] setObjects;
		public Types.ObjectEffect[] setEffects;
		
		public SetUpdateMessage()
		{
		}
		
		public SetUpdateMessage(short setId, short[] setObjects, Types.ObjectEffect[] setEffects)
		{
			this.setId = setId;
			this.setObjects = setObjects;
			this.setEffects = setEffects;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteShort(setId);
			writer.WriteUShort((ushort)setObjects.Length);
			for (int i = 0; i < setObjects.Length; i++)
			{
				writer.WriteShort(setObjects[i]);
			}
			writer.WriteUShort((ushort)setEffects.Length);
			for (int i = 0; i < setEffects.Length; i++)
			{
				writer.WriteShort(setEffects[i].TypeId);
				setEffects[i].Serialize(writer);
			}
		}
		
		public override void Deserialize(IDataReader reader)
		{
			setId = reader.ReadShort();
			if ( setId < 0 )
			{
				throw new Exception("Forbidden value on setId = " + setId + ", it doesn't respect the following condition : setId < 0");
			}
			int limit = reader.ReadUShort();
			setObjects = new short[limit];
			for (int i = 0; i < limit; i++)
			{
				setObjects[i] = reader.ReadShort();
			}
			limit = reader.ReadUShort();
			setEffects = new Types.ObjectEffect[limit];
			for (int i = 0; i < limit; i++)
			{
				setEffects[i] = Types.ProtocolTypeManager.GetInstance<Types.ObjectEffect>(reader.ReadShort());
				setEffects[i].Deserialize(reader);
			}
		}
	}
}
