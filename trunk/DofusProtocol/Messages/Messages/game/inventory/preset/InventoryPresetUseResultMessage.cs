// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'InventoryPresetUseResultMessage.xml' the '30/06/2011 11:40:20'
using System;
using Stump.Core.IO;
using System.Collections.Generic;
using System.Linq;

namespace Stump.DofusProtocol.Messages
{
	public class InventoryPresetUseResultMessage : Message
	{
		public const uint Id = 6163;
		public override uint MessageId
		{
			get
			{
				return 6163;
			}
		}
		
		public byte presetId;
		public byte code;
		public IEnumerable<byte> unlinkedPosition;
		
		public InventoryPresetUseResultMessage()
		{
		}
		
		public InventoryPresetUseResultMessage(byte presetId, byte code, IEnumerable<byte> unlinkedPosition)
		{
			this.presetId = presetId;
			this.code = code;
			this.unlinkedPosition = unlinkedPosition;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteByte(presetId);
			writer.WriteByte(code);
			writer.WriteUShort((ushort)unlinkedPosition.Count());
			foreach (var entry in unlinkedPosition)
			{
				writer.WriteByte(entry);
			}
		}
		
		public override void Deserialize(IDataReader reader)
		{
			presetId = reader.ReadByte();
			if ( presetId < 0 )
			{
				throw new Exception("Forbidden value on presetId = " + presetId + ", it doesn't respect the following condition : presetId < 0");
			}
			code = reader.ReadByte();
			if ( code < 0 )
			{
				throw new Exception("Forbidden value on code = " + code + ", it doesn't respect the following condition : code < 0");
			}
			int limit = reader.ReadUShort();
			unlinkedPosition = new byte[limit];
			for (int i = 0; i < limit; i++)
			{
				(unlinkedPosition as byte[])[i] = reader.ReadByte();
			}
		}
	}
}
