// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'TeleportDestinationsListMessage.xml' the '30/06/2011 11:40:17'
using System;
using Stump.Core.IO;
using System.Collections.Generic;
using System.Linq;

namespace Stump.DofusProtocol.Messages
{
	public class TeleportDestinationsListMessage : Message
	{
		public const uint Id = 5960;
		public override uint MessageId
		{
			get
			{
				return 5960;
			}
		}
		
		public byte teleporterType;
		public IEnumerable<int> mapIds;
		public IEnumerable<short> subareaIds;
		public IEnumerable<short> costs;
		
		public TeleportDestinationsListMessage()
		{
		}
		
		public TeleportDestinationsListMessage(byte teleporterType, IEnumerable<int> mapIds, IEnumerable<short> subareaIds, IEnumerable<short> costs)
		{
			this.teleporterType = teleporterType;
			this.mapIds = mapIds;
			this.subareaIds = subareaIds;
			this.costs = costs;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteByte(teleporterType);
			writer.WriteUShort((ushort)mapIds.Count());
			foreach (var entry in mapIds)
			{
				writer.WriteInt(entry);
			}
			writer.WriteUShort((ushort)subareaIds.Count());
			foreach (var entry in subareaIds)
			{
				writer.WriteShort(entry);
			}
			writer.WriteUShort((ushort)costs.Count());
			foreach (var entry in costs)
			{
				writer.WriteShort(entry);
			}
		}
		
		public override void Deserialize(IDataReader reader)
		{
			teleporterType = reader.ReadByte();
			if ( teleporterType < 0 )
			{
				throw new Exception("Forbidden value on teleporterType = " + teleporterType + ", it doesn't respect the following condition : teleporterType < 0");
			}
			int limit = reader.ReadUShort();
			mapIds = new int[limit];
			for (int i = 0; i < limit; i++)
			{
				(mapIds as int[])[i] = reader.ReadInt();
			}
			limit = reader.ReadUShort();
			subareaIds = new short[limit];
			for (int i = 0; i < limit; i++)
			{
				(subareaIds as short[])[i] = reader.ReadShort();
			}
			limit = reader.ReadUShort();
			costs = new short[limit];
			for (int i = 0; i < limit; i++)
			{
				(costs as short[])[i] = reader.ReadShort();
			}
		}
	}
}
