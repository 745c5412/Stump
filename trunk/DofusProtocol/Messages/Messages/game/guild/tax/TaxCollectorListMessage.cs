// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'TaxCollectorListMessage.xml' the '15/06/2011 01:39:01'
using System;
using Stump.BaseCore.Framework.IO;

namespace Stump.DofusProtocol.Messages
{
	public class TaxCollectorListMessage : Message
	{
		public const uint Id = 5930;
		public override uint MessageId
		{
			get
			{
				return 5930;
			}
		}
		
		public byte nbcollectorMax;
		public short taxCollectorHireCost;
		public Types.TaxCollectorInformations[] informations;
		public Types.TaxCollectorFightersInformation[] fightersInformations;
		
		public TaxCollectorListMessage()
		{
		}
		
		public TaxCollectorListMessage(byte nbcollectorMax, short taxCollectorHireCost, Types.TaxCollectorInformations[] informations, Types.TaxCollectorFightersInformation[] fightersInformations)
		{
			this.nbcollectorMax = nbcollectorMax;
			this.taxCollectorHireCost = taxCollectorHireCost;
			this.informations = informations;
			this.fightersInformations = fightersInformations;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteByte(nbcollectorMax);
			writer.WriteShort(taxCollectorHireCost);
			writer.WriteUShort((ushort)informations.Length);
			for (int i = 0; i < informations.Length; i++)
			{
				writer.WriteShort(informations[i].TypeId);
				informations[i].Serialize(writer);
			}
			writer.WriteUShort((ushort)fightersInformations.Length);
			for (int i = 0; i < fightersInformations.Length; i++)
			{
				fightersInformations[i].Serialize(writer);
			}
		}
		
		public override void Deserialize(IDataReader reader)
		{
			nbcollectorMax = reader.ReadByte();
			if ( nbcollectorMax < 0 )
			{
				throw new Exception("Forbidden value on nbcollectorMax = " + nbcollectorMax + ", it doesn't respect the following condition : nbcollectorMax < 0");
			}
			taxCollectorHireCost = reader.ReadShort();
			if ( taxCollectorHireCost < 0 )
			{
				throw new Exception("Forbidden value on taxCollectorHireCost = " + taxCollectorHireCost + ", it doesn't respect the following condition : taxCollectorHireCost < 0");
			}
			int limit = reader.ReadUShort();
			informations = new Types.TaxCollectorInformations[limit];
			for (int i = 0; i < limit; i++)
			{
				informations[i] = Types.ProtocolTypeManager.GetInstance<Types.TaxCollectorInformations>(reader.ReadShort());
				informations[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			fightersInformations = new Types.TaxCollectorFightersInformation[limit];
			for (int i = 0; i < limit; i++)
			{
				fightersInformations[i] = new Types.TaxCollectorFightersInformation();
				fightersInformations[i].Deserialize(reader);
			}
		}
	}
}
