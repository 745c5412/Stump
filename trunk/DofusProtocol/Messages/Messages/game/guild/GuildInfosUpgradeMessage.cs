// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'GuildInfosUpgradeMessage.xml' the '15/06/2011 01:38:59'
using System;
using Stump.BaseCore.Framework.IO;

namespace Stump.DofusProtocol.Messages
{
	public class GuildInfosUpgradeMessage : Message
	{
		public const uint Id = 5636;
		public override uint MessageId
		{
			get
			{
				return 5636;
			}
		}
		
		public byte maxTaxCollectorsCount;
		public byte taxCollectorsCount;
		public short taxCollectorLifePoints;
		public short taxCollectorDamagesBonuses;
		public short taxCollectorPods;
		public short taxCollectorProspecting;
		public short taxCollectorWisdom;
		public short boostPoints;
		public short[] spellId;
		public byte[] spellLevel;
		
		public GuildInfosUpgradeMessage()
		{
		}
		
		public GuildInfosUpgradeMessage(byte maxTaxCollectorsCount, byte taxCollectorsCount, short taxCollectorLifePoints, short taxCollectorDamagesBonuses, short taxCollectorPods, short taxCollectorProspecting, short taxCollectorWisdom, short boostPoints, short[] spellId, byte[] spellLevel)
		{
			this.maxTaxCollectorsCount = maxTaxCollectorsCount;
			this.taxCollectorsCount = taxCollectorsCount;
			this.taxCollectorLifePoints = taxCollectorLifePoints;
			this.taxCollectorDamagesBonuses = taxCollectorDamagesBonuses;
			this.taxCollectorPods = taxCollectorPods;
			this.taxCollectorProspecting = taxCollectorProspecting;
			this.taxCollectorWisdom = taxCollectorWisdom;
			this.boostPoints = boostPoints;
			this.spellId = spellId;
			this.spellLevel = spellLevel;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteByte(maxTaxCollectorsCount);
			writer.WriteByte(taxCollectorsCount);
			writer.WriteShort(taxCollectorLifePoints);
			writer.WriteShort(taxCollectorDamagesBonuses);
			writer.WriteShort(taxCollectorPods);
			writer.WriteShort(taxCollectorProspecting);
			writer.WriteShort(taxCollectorWisdom);
			writer.WriteShort(boostPoints);
			writer.WriteUShort((ushort)spellId.Length);
			for (int i = 0; i < spellId.Length; i++)
			{
				writer.WriteShort(spellId[i]);
			}
			writer.WriteUShort((ushort)spellLevel.Length);
			for (int i = 0; i < spellLevel.Length; i++)
			{
				writer.WriteByte(spellLevel[i]);
			}
		}
		
		public override void Deserialize(IDataReader reader)
		{
			maxTaxCollectorsCount = reader.ReadByte();
			if ( maxTaxCollectorsCount < 0 )
			{
				throw new Exception("Forbidden value on maxTaxCollectorsCount = " + maxTaxCollectorsCount + ", it doesn't respect the following condition : maxTaxCollectorsCount < 0");
			}
			taxCollectorsCount = reader.ReadByte();
			if ( taxCollectorsCount < 0 )
			{
				throw new Exception("Forbidden value on taxCollectorsCount = " + taxCollectorsCount + ", it doesn't respect the following condition : taxCollectorsCount < 0");
			}
			taxCollectorLifePoints = reader.ReadShort();
			if ( taxCollectorLifePoints < 0 )
			{
				throw new Exception("Forbidden value on taxCollectorLifePoints = " + taxCollectorLifePoints + ", it doesn't respect the following condition : taxCollectorLifePoints < 0");
			}
			taxCollectorDamagesBonuses = reader.ReadShort();
			if ( taxCollectorDamagesBonuses < 0 )
			{
				throw new Exception("Forbidden value on taxCollectorDamagesBonuses = " + taxCollectorDamagesBonuses + ", it doesn't respect the following condition : taxCollectorDamagesBonuses < 0");
			}
			taxCollectorPods = reader.ReadShort();
			if ( taxCollectorPods < 0 )
			{
				throw new Exception("Forbidden value on taxCollectorPods = " + taxCollectorPods + ", it doesn't respect the following condition : taxCollectorPods < 0");
			}
			taxCollectorProspecting = reader.ReadShort();
			if ( taxCollectorProspecting < 0 )
			{
				throw new Exception("Forbidden value on taxCollectorProspecting = " + taxCollectorProspecting + ", it doesn't respect the following condition : taxCollectorProspecting < 0");
			}
			taxCollectorWisdom = reader.ReadShort();
			if ( taxCollectorWisdom < 0 )
			{
				throw new Exception("Forbidden value on taxCollectorWisdom = " + taxCollectorWisdom + ", it doesn't respect the following condition : taxCollectorWisdom < 0");
			}
			boostPoints = reader.ReadShort();
			if ( boostPoints < 0 )
			{
				throw new Exception("Forbidden value on boostPoints = " + boostPoints + ", it doesn't respect the following condition : boostPoints < 0");
			}
			int limit = reader.ReadUShort();
			spellId = new short[limit];
			for (int i = 0; i < limit; i++)
			{
				spellId[i] = reader.ReadShort();
			}
			limit = reader.ReadUShort();
			spellLevel = new byte[limit];
			for (int i = 0; i < limit; i++)
			{
				spellLevel[i] = reader.ReadByte();
			}
		}
	}
}
