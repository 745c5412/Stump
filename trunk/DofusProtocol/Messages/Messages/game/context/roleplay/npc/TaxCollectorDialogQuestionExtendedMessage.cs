// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'TaxCollectorDialogQuestionExtendedMessage.xml' the '15/06/2011 01:38:53'
using System;
using Stump.Core.IO;

namespace Stump.DofusProtocol.Messages
{
	public class TaxCollectorDialogQuestionExtendedMessage : TaxCollectorDialogQuestionBasicMessage
	{
		public const uint Id = 5615;
		public override uint MessageId
		{
			get
			{
				return 5615;
			}
		}
		
		public short pods;
		public short prospecting;
		public short wisdom;
		public byte taxCollectorsCount;
		public int taxCollectorAttack;
		
		public TaxCollectorDialogQuestionExtendedMessage()
		{
		}
		
		public TaxCollectorDialogQuestionExtendedMessage(Types.BasicGuildInformations guildInfo, short pods, short prospecting, short wisdom, byte taxCollectorsCount, int taxCollectorAttack)
			 : base(guildInfo)
		{
			this.pods = pods;
			this.prospecting = prospecting;
			this.wisdom = wisdom;
			this.taxCollectorsCount = taxCollectorsCount;
			this.taxCollectorAttack = taxCollectorAttack;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			base.Serialize(writer);
			writer.WriteShort(pods);
			writer.WriteShort(prospecting);
			writer.WriteShort(wisdom);
			writer.WriteByte(taxCollectorsCount);
			writer.WriteInt(taxCollectorAttack);
		}
		
		public override void Deserialize(IDataReader reader)
		{
			base.Deserialize(reader);
			pods = reader.ReadShort();
			if ( pods < 0 )
			{
				throw new Exception("Forbidden value on pods = " + pods + ", it doesn't respect the following condition : pods < 0");
			}
			prospecting = reader.ReadShort();
			if ( prospecting < 0 )
			{
				throw new Exception("Forbidden value on prospecting = " + prospecting + ", it doesn't respect the following condition : prospecting < 0");
			}
			wisdom = reader.ReadShort();
			if ( wisdom < 0 )
			{
				throw new Exception("Forbidden value on wisdom = " + wisdom + ", it doesn't respect the following condition : wisdom < 0");
			}
			taxCollectorsCount = reader.ReadByte();
			if ( taxCollectorsCount < 0 )
			{
				throw new Exception("Forbidden value on taxCollectorsCount = " + taxCollectorsCount + ", it doesn't respect the following condition : taxCollectorsCount < 0");
			}
			taxCollectorAttack = reader.ReadInt();
		}
	}
}
