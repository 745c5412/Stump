// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'PartyInvitationDetailsMessage.xml' the '30/06/2011 11:40:15'
using System;
using Stump.Core.IO;
using System.Collections.Generic;
using System.Linq;

namespace Stump.DofusProtocol.Messages
{
	public class PartyInvitationDetailsMessage : Message
	{
		public const uint Id = 6263;
		public override uint MessageId
		{
			get
			{
				return 6263;
			}
		}
		
		public int partyId;
		public int fromId;
		public string fromName;
		public int leaderId;
		public IEnumerable<Types.PartyInvitationMemberInformations> members;
		
		public PartyInvitationDetailsMessage()
		{
		}
		
		public PartyInvitationDetailsMessage(int partyId, int fromId, string fromName, int leaderId, IEnumerable<Types.PartyInvitationMemberInformations> members)
		{
			this.partyId = partyId;
			this.fromId = fromId;
			this.fromName = fromName;
			this.leaderId = leaderId;
			this.members = members;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteInt(partyId);
			writer.WriteInt(fromId);
			writer.WriteUTF(fromName);
			writer.WriteInt(leaderId);
			writer.WriteUShort((ushort)members.Count());
			foreach (var entry in members)
			{
				writer.WriteShort(entry.TypeId);
				entry.Serialize(writer);
			}
		}
		
		public override void Deserialize(IDataReader reader)
		{
			partyId = reader.ReadInt();
			if ( partyId < 0 )
			{
				throw new Exception("Forbidden value on partyId = " + partyId + ", it doesn't respect the following condition : partyId < 0");
			}
			fromId = reader.ReadInt();
			if ( fromId < 0 )
			{
				throw new Exception("Forbidden value on fromId = " + fromId + ", it doesn't respect the following condition : fromId < 0");
			}
			fromName = reader.ReadUTF();
			leaderId = reader.ReadInt();
			if ( leaderId < 0 )
			{
				throw new Exception("Forbidden value on leaderId = " + leaderId + ", it doesn't respect the following condition : leaderId < 0");
			}
			int limit = reader.ReadUShort();
			members = new Types.PartyInvitationMemberInformations[limit];
			for (int i = 0; i < limit; i++)
			{
				(members as Types.PartyInvitationMemberInformations[])[i] = Types.ProtocolTypeManager.GetInstance<Types.PartyInvitationMemberInformations>(reader.ReadShort());
				(members as Types.PartyInvitationMemberInformations[])[i].Deserialize(reader);
			}
		}
	}
}
