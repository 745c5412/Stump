// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'PartyJoinMessage.xml' the '22/08/2011 17:22:57'
using System;
using Stump.Core.IO;
using System.Collections.Generic;
using System.Linq;

namespace Stump.DofusProtocol.Messages
{
	public class PartyJoinMessage : Message
	{
		public const uint Id = 5576;
		public override uint MessageId
		{
			get
			{
				return 5576;
			}
		}
		
		public int partyId;
		public int partyLeaderId;
		public IEnumerable<Types.PartyMemberInformations> members;
		public IEnumerable<Types.PartyGuestInformations> guests;
		public bool restricted;
		
		public PartyJoinMessage()
		{
		}
		
		public PartyJoinMessage(int partyId, int partyLeaderId, IEnumerable<Types.PartyMemberInformations> members, IEnumerable<Types.PartyGuestInformations> guests, bool restricted)
		{
			this.partyId = partyId;
			this.partyLeaderId = partyLeaderId;
			this.members = members;
			this.guests = guests;
			this.restricted = restricted;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteInt(partyId);
			writer.WriteInt(partyLeaderId);
			writer.WriteUShort((ushort)members.Count());
			foreach (var entry in members)
			{
				entry.Serialize(writer);
			}
			writer.WriteUShort((ushort)guests.Count());
			foreach (var entry in guests)
			{
				entry.Serialize(writer);
			}
			writer.WriteBoolean(restricted);
		}
		
		public override void Deserialize(IDataReader reader)
		{
			partyId = reader.ReadInt();
			if ( partyId < 0 )
			{
				throw new Exception("Forbidden value on partyId = " + partyId + ", it doesn't respect the following condition : partyId < 0");
			}
			partyLeaderId = reader.ReadInt();
			if ( partyLeaderId < 0 )
			{
				throw new Exception("Forbidden value on partyLeaderId = " + partyLeaderId + ", it doesn't respect the following condition : partyLeaderId < 0");
			}
			int limit = reader.ReadUShort();
			members = new Types.PartyMemberInformations[limit];
			for (int i = 0; i < limit; i++)
			{
				(members as Types.PartyMemberInformations[])[i] = new Types.PartyMemberInformations();
				(members as Types.PartyMemberInformations[])[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			guests = new Types.PartyGuestInformations[limit];
			for (int i = 0; i < limit; i++)
			{
				(guests as Types.PartyGuestInformations[])[i] = new Types.PartyGuestInformations();
				(guests as Types.PartyGuestInformations[])[i].Deserialize(reader);
			}
			restricted = reader.ReadBoolean();
		}
	}
}
