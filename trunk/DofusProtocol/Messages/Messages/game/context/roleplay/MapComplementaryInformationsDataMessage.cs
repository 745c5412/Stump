// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'MapComplementaryInformationsDataMessage.xml' the '15/06/2011 01:38:50'
using System;
using Stump.Core.IO;

namespace Stump.DofusProtocol.Messages
{
	public class MapComplementaryInformationsDataMessage : Message
	{
		public const uint Id = 226;
		public override uint MessageId
		{
			get
			{
				return 226;
			}
		}
		
		public short subareaId;
		public int mapId;
		public byte subareaAlignmentSide;
		public Types.HouseInformations[] houses;
		public Types.GameRolePlayActorInformations[] actors;
		public Types.InteractiveElement[] interactiveElements;
		public Types.StatedElement[] statedElements;
		public Types.MapObstacle[] obstacles;
		public Types.FightCommonInformations[] fights;
		
		public MapComplementaryInformationsDataMessage()
		{
		}
		
		public MapComplementaryInformationsDataMessage(short subareaId, int mapId, byte subareaAlignmentSide, Types.HouseInformations[] houses, Types.GameRolePlayActorInformations[] actors, Types.InteractiveElement[] interactiveElements, Types.StatedElement[] statedElements, Types.MapObstacle[] obstacles, Types.FightCommonInformations[] fights)
		{
			this.subareaId = subareaId;
			this.mapId = mapId;
			this.subareaAlignmentSide = subareaAlignmentSide;
			this.houses = houses;
			this.actors = actors;
			this.interactiveElements = interactiveElements;
			this.statedElements = statedElements;
			this.obstacles = obstacles;
			this.fights = fights;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteShort(subareaId);
			writer.WriteInt(mapId);
			writer.WriteByte(subareaAlignmentSide);
			writer.WriteUShort((ushort)houses.Length);
			for (int i = 0; i < houses.Length; i++)
			{
				writer.WriteShort(houses[i].TypeId);
				houses[i].Serialize(writer);
			}
			writer.WriteUShort((ushort)actors.Length);
			for (int i = 0; i < actors.Length; i++)
			{
				writer.WriteShort(actors[i].TypeId);
				actors[i].Serialize(writer);
			}
			writer.WriteUShort((ushort)interactiveElements.Length);
			for (int i = 0; i < interactiveElements.Length; i++)
			{
				interactiveElements[i].Serialize(writer);
			}
			writer.WriteUShort((ushort)statedElements.Length);
			for (int i = 0; i < statedElements.Length; i++)
			{
				statedElements[i].Serialize(writer);
			}
			writer.WriteUShort((ushort)obstacles.Length);
			for (int i = 0; i < obstacles.Length; i++)
			{
				obstacles[i].Serialize(writer);
			}
			writer.WriteUShort((ushort)fights.Length);
			for (int i = 0; i < fights.Length; i++)
			{
				fights[i].Serialize(writer);
			}
		}
		
		public override void Deserialize(IDataReader reader)
		{
			subareaId = reader.ReadShort();
			if ( subareaId < 0 )
			{
				throw new Exception("Forbidden value on subareaId = " + subareaId + ", it doesn't respect the following condition : subareaId < 0");
			}
			mapId = reader.ReadInt();
			if ( mapId < 0 )
			{
				throw new Exception("Forbidden value on mapId = " + mapId + ", it doesn't respect the following condition : mapId < 0");
			}
			subareaAlignmentSide = reader.ReadByte();
			int limit = reader.ReadUShort();
			houses = new Types.HouseInformations[limit];
			for (int i = 0; i < limit; i++)
			{
				houses[i] = Types.ProtocolTypeManager.GetInstance<Types.HouseInformations>(reader.ReadShort());
				houses[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			actors = new Types.GameRolePlayActorInformations[limit];
			for (int i = 0; i < limit; i++)
			{
				actors[i] = Types.ProtocolTypeManager.GetInstance<Types.GameRolePlayActorInformations>(reader.ReadShort());
				actors[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			interactiveElements = new Types.InteractiveElement[limit];
			for (int i = 0; i < limit; i++)
			{
				interactiveElements[i] = new Types.InteractiveElement();
				interactiveElements[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			statedElements = new Types.StatedElement[limit];
			for (int i = 0; i < limit; i++)
			{
				statedElements[i] = new Types.StatedElement();
				statedElements[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			obstacles = new Types.MapObstacle[limit];
			for (int i = 0; i < limit; i++)
			{
				obstacles[i] = new Types.MapObstacle();
				obstacles[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			fights = new Types.FightCommonInformations[limit];
			for (int i = 0; i < limit; i++)
			{
				fights[i] = new Types.FightCommonInformations();
				fights[i].Deserialize(reader);
			}
		}
	}
}
