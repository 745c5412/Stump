// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'MapComplementaryInformationsDataMessage.xml' the '30/06/2011 11:40:13'
using System;
using Stump.Core.IO;
using System.Collections.Generic;
using System.Linq;

namespace Stump.DofusProtocol.Messages
{
	public class MapComplementaryInformationsDataMessage : Message
	{
		public const uint Id = 226;
		public override uint MessageId
		{
			get
			{
				return 226;
			}
		}
		
		public short subareaId;
		public int mapId;
		public byte subareaAlignmentSide;
		public IEnumerable<Types.HouseInformations> houses;
		public IEnumerable<Types.GameRolePlayActorInformations> actors;
		public IEnumerable<Types.InteractiveElement> interactiveElements;
		public IEnumerable<Types.StatedElement> statedElements;
		public IEnumerable<Types.MapObstacle> obstacles;
		public IEnumerable<Types.FightCommonInformations> fights;
		
		public MapComplementaryInformationsDataMessage()
		{
		}
		
		public MapComplementaryInformationsDataMessage(short subareaId, int mapId, byte subareaAlignmentSide, IEnumerable<Types.HouseInformations> houses, IEnumerable<Types.GameRolePlayActorInformations> actors, IEnumerable<Types.InteractiveElement> interactiveElements, IEnumerable<Types.StatedElement> statedElements, IEnumerable<Types.MapObstacle> obstacles, IEnumerable<Types.FightCommonInformations> fights)
		{
			this.subareaId = subareaId;
			this.mapId = mapId;
			this.subareaAlignmentSide = subareaAlignmentSide;
			this.houses = houses;
			this.actors = actors;
			this.interactiveElements = interactiveElements;
			this.statedElements = statedElements;
			this.obstacles = obstacles;
			this.fights = fights;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteShort(subareaId);
			writer.WriteInt(mapId);
			writer.WriteByte(subareaAlignmentSide);
			writer.WriteUShort((ushort)houses.Count());
			foreach (var entry in houses)
			{
				writer.WriteShort(entry.TypeId);
				entry.Serialize(writer);
			}
			writer.WriteUShort((ushort)actors.Count());
			foreach (var entry in actors)
			{
				writer.WriteShort(entry.TypeId);
				entry.Serialize(writer);
			}
			writer.WriteUShort((ushort)interactiveElements.Count());
			foreach (var entry in interactiveElements)
			{
				entry.Serialize(writer);
			}
			writer.WriteUShort((ushort)statedElements.Count());
			foreach (var entry in statedElements)
			{
				entry.Serialize(writer);
			}
			writer.WriteUShort((ushort)obstacles.Count());
			foreach (var entry in obstacles)
			{
				entry.Serialize(writer);
			}
			writer.WriteUShort((ushort)fights.Count());
			foreach (var entry in fights)
			{
				entry.Serialize(writer);
			}
		}
		
		public override void Deserialize(IDataReader reader)
		{
			subareaId = reader.ReadShort();
			if ( subareaId < 0 )
			{
				throw new Exception("Forbidden value on subareaId = " + subareaId + ", it doesn't respect the following condition : subareaId < 0");
			}
			mapId = reader.ReadInt();
			if ( mapId < 0 )
			{
				throw new Exception("Forbidden value on mapId = " + mapId + ", it doesn't respect the following condition : mapId < 0");
			}
			subareaAlignmentSide = reader.ReadByte();
			int limit = reader.ReadUShort();
			houses = new Types.HouseInformations[limit];
			for (int i = 0; i < limit; i++)
			{
				(houses as Types.HouseInformations[])[i] = Types.ProtocolTypeManager.GetInstance<Types.HouseInformations>(reader.ReadShort());
				(houses as Types.HouseInformations[])[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			actors = new Types.GameRolePlayActorInformations[limit];
			for (int i = 0; i < limit; i++)
			{
				(actors as Types.GameRolePlayActorInformations[])[i] = Types.ProtocolTypeManager.GetInstance<Types.GameRolePlayActorInformations>(reader.ReadShort());
				(actors as Types.GameRolePlayActorInformations[])[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			interactiveElements = new Types.InteractiveElement[limit];
			for (int i = 0; i < limit; i++)
			{
				(interactiveElements as Types.InteractiveElement[])[i] = new Types.InteractiveElement();
				(interactiveElements as Types.InteractiveElement[])[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			statedElements = new Types.StatedElement[limit];
			for (int i = 0; i < limit; i++)
			{
				(statedElements as Types.StatedElement[])[i] = new Types.StatedElement();
				(statedElements as Types.StatedElement[])[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			obstacles = new Types.MapObstacle[limit];
			for (int i = 0; i < limit; i++)
			{
				(obstacles as Types.MapObstacle[])[i] = new Types.MapObstacle();
				(obstacles as Types.MapObstacle[])[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			fights = new Types.FightCommonInformations[limit];
			for (int i = 0; i < limit; i++)
			{
				(fights as Types.FightCommonInformations[])[i] = new Types.FightCommonInformations();
				(fights as Types.FightCommonInformations[])[i].Deserialize(reader);
			}
		}
	}
}
