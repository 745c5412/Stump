// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'MapRunningFightDetailsMessage.xml' the '24/06/2011 12:04:49'
using System;
using Stump.Core.IO;

namespace Stump.DofusProtocol.Messages
{
	public class MapRunningFightDetailsMessage : Message
	{
		public const uint Id = 5751;
		public override uint MessageId
		{
			get
			{
				return 5751;
			}
		}
		
		public int fightId;
		public string[] names;
		public short[] levels;
		public byte teamSwap;
		public bool[] alives;
		
		public MapRunningFightDetailsMessage()
		{
		}
		
		public MapRunningFightDetailsMessage(int fightId, string[] names, short[] levels, byte teamSwap, bool[] alives)
		{
			this.fightId = fightId;
			this.names = names;
			this.levels = levels;
			this.teamSwap = teamSwap;
			this.alives = alives;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteInt(fightId);
			writer.WriteUShort((ushort)names.Length);
			for (int i = 0; i < names.Length; i++)
			{
				writer.WriteUTF(names[i]);
			}
			writer.WriteUShort((ushort)levels.Length);
			for (int i = 0; i < levels.Length; i++)
			{
				writer.WriteShort(levels[i]);
			}
			writer.WriteByte(teamSwap);
			writer.WriteUShort((ushort)alives.Length);
			for (int i = 0; i < alives.Length; i++)
			{
				writer.WriteBoolean(alives[i]);
			}
		}
		
		public override void Deserialize(IDataReader reader)
		{
			fightId = reader.ReadInt();
			if ( fightId < 0 )
			{
				throw new Exception("Forbidden value on fightId = " + fightId + ", it doesn't respect the following condition : fightId < 0");
			}
			int limit = reader.ReadUShort();
			names = new string[limit];
			for (int i = 0; i < limit; i++)
			{
				names[i] = reader.ReadUTF();
			}
			limit = reader.ReadUShort();
			levels = new short[limit];
			for (int i = 0; i < limit; i++)
			{
				levels[i] = reader.ReadShort();
			}
			teamSwap = reader.ReadByte();
			if ( teamSwap < 0 )
			{
				throw new Exception("Forbidden value on teamSwap = " + teamSwap + ", it doesn't respect the following condition : teamSwap < 0");
			}
			limit = reader.ReadUShort();
			alives = new bool[limit];
			for (int i = 0; i < limit; i++)
			{
				alives[i] = reader.ReadBoolean();
			}
		}
	}
}
