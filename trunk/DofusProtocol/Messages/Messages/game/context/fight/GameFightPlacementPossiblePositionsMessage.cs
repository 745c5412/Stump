// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'GameFightPlacementPossiblePositionsMessage.xml' the '15/06/2011 01:38:47'
using System;
using Stump.BaseCore.Framework.IO;

namespace Stump.DofusProtocol.Messages
{
	public class GameFightPlacementPossiblePositionsMessage : Message
	{
		public const uint Id = 703;
		public override uint MessageId
		{
			get
			{
				return 703;
			}
		}
		
		public short[] positionsForChallengers;
		public short[] positionsForDefenders;
		public byte teamNumber;
		
		public GameFightPlacementPossiblePositionsMessage()
		{
		}
		
		public GameFightPlacementPossiblePositionsMessage(short[] positionsForChallengers, short[] positionsForDefenders, byte teamNumber)
		{
			this.positionsForChallengers = positionsForChallengers;
			this.positionsForDefenders = positionsForDefenders;
			this.teamNumber = teamNumber;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteUShort((ushort)positionsForChallengers.Length);
			for (int i = 0; i < positionsForChallengers.Length; i++)
			{
				writer.WriteShort(positionsForChallengers[i]);
			}
			writer.WriteUShort((ushort)positionsForDefenders.Length);
			for (int i = 0; i < positionsForDefenders.Length; i++)
			{
				writer.WriteShort(positionsForDefenders[i]);
			}
			writer.WriteByte(teamNumber);
		}
		
		public override void Deserialize(IDataReader reader)
		{
			int limit = reader.ReadUShort();
			positionsForChallengers = new short[limit];
			for (int i = 0; i < limit; i++)
			{
				positionsForChallengers[i] = reader.ReadShort();
			}
			limit = reader.ReadUShort();
			positionsForDefenders = new short[limit];
			for (int i = 0; i < limit; i++)
			{
				positionsForDefenders[i] = reader.ReadShort();
			}
			teamNumber = reader.ReadByte();
			if ( teamNumber < 0 )
			{
				throw new Exception("Forbidden value on teamNumber = " + teamNumber + ", it doesn't respect the following condition : teamNumber < 0");
			}
		}
	}
}
