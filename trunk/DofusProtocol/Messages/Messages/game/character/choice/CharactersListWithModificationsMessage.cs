// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'CharactersListWithModificationsMessage.xml' the '15/06/2011 01:38:43'
using System;
using Stump.Core.IO;

namespace Stump.DofusProtocol.Messages
{
	public class CharactersListWithModificationsMessage : CharactersListMessage
	{
		public const uint Id = 6120;
		public override uint MessageId
		{
			get
			{
				return 6120;
			}
		}
		
		public Types.CharacterToRecolorInformation[] charactersToRecolor;
		public int[] charactersToRename;
		public int[] unusableCharacters;
		
		public CharactersListWithModificationsMessage()
		{
		}
		
		public CharactersListWithModificationsMessage(bool hasStartupActions, Types.CharacterBaseInformations[] characters, Types.CharacterToRecolorInformation[] charactersToRecolor, int[] charactersToRename, int[] unusableCharacters)
			 : base(hasStartupActions, characters)
		{
			this.charactersToRecolor = charactersToRecolor;
			this.charactersToRename = charactersToRename;
			this.unusableCharacters = unusableCharacters;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			base.Serialize(writer);
			writer.WriteUShort((ushort)charactersToRecolor.Length);
			for (int i = 0; i < charactersToRecolor.Length; i++)
			{
				writer.WriteShort(charactersToRecolor[i].TypeId);
				charactersToRecolor[i].Serialize(writer);
			}
			writer.WriteUShort((ushort)charactersToRename.Length);
			for (int i = 0; i < charactersToRename.Length; i++)
			{
				writer.WriteInt(charactersToRename[i]);
			}
			writer.WriteUShort((ushort)unusableCharacters.Length);
			for (int i = 0; i < unusableCharacters.Length; i++)
			{
				writer.WriteInt(unusableCharacters[i]);
			}
		}
		
		public override void Deserialize(IDataReader reader)
		{
			base.Deserialize(reader);
			int limit = reader.ReadUShort();
			charactersToRecolor = new Types.CharacterToRecolorInformation[limit];
			for (int i = 0; i < limit; i++)
			{
				charactersToRecolor[i] = Types.ProtocolTypeManager.GetInstance<Types.CharacterToRecolorInformation>(reader.ReadShort());
				charactersToRecolor[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			charactersToRename = new int[limit];
			for (int i = 0; i < limit; i++)
			{
				charactersToRename[i] = reader.ReadInt();
			}
			limit = reader.ReadUShort();
			unusableCharacters = new int[limit];
			for (int i = 0; i < limit; i++)
			{
				unusableCharacters[i] = reader.ReadInt();
			}
		}
	}
}
