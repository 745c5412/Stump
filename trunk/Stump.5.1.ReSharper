<Configuration>
  <Daemon.SolutionSettings>
    <SkipFilesAndFolders>
      <Item>10884165-D492-4895-B3EF-32429F7A7F55</Item>
      <Item>33093793-C4BA-4B89-AC82-6E9D00437452</Item>
      <Item>53092D2E-8F37-4889-B6B7-B359E093E3F4</Item>
      <Item>D7BFF8ED-065B-4A53-9805-595DFEA75A0A</Item>
    </SkipFilesAndFolders>
  </Daemon.SolutionSettings>
  <SharedSolutionTemplateManager>
    <LiveTemplates>
      <Template uid="1ad94c49-30cc-47a8-8523-d1db1853615d" shortcut="send" description="Send function" text="public static void Send$NAME$($SERVER$Client client)&#xD;&#xA;{&#xD;&#xA;	client.Send(new $NAME$($END$));&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="SERVER" expression="list(&quot;World, Auth&quot;)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="60a69f27-744e-4486-9309-5e383f281ae0" shortcut="hctor" description="Handler constructor" text="$CLASSNAME$()&#xD;&#xA;{&#xD;&#xA;	Predicates = new Dictionary&lt;Type, Predicate&lt;$SERVICE$Client&gt;&gt;&#xD;&#xA;    {&#xD;&#xA;		$END$&#xD;&#xA;    };&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="CLASSNAME" expression="typeName()" initialRange="0" />
          <Variable name="SERVICE" expression="list(&quot;World, Auth&quot;)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="1cbe847c-b229-47ff-aaf5-d395e06d1b6c" shortcut="valid" description="Create and implents methods of a ObjectValidator" text="#region $NAME$&#xD;&#xA;private ObjectValidator&lt;$NAME$&gt; m_$LNAME$;&#xD;&#xA;&#xD;&#xA;private $NAME$ Build$NAME$()&#xD;&#xA;{&#xD;&#xA;	return new $NAME$(&#xD;&#xA;	$END$);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public $NAME$ Get$NAME$()&#xD;&#xA;{&#xD;&#xA;	return m_$LNAME$;&#xD;&#xA;}&#xD;&#xA;#endregion" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="3.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="LNAME" expression="decapitalize(NAME)" initialRange="-1" />
        </Variables>
        <CustomProperties />
      </Template>
      <Template uid="469daf04-b472-4aab-b057-4708d8561c48" shortcut="handle" description="Handle function" text="[$SERVER$Handler($NAME$.Id)]&#xD;&#xA;public static void Handle$NAME$($SERVER$Client client, $NAME$ message)&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="NAME" expression="" initialRange="0" />
          <Variable name="SERVER" expression="list(&quot;World, Auth&quot;)" initialRange="0" />
        </Variables>
        <CustomProperties />
      </Template>
    </LiveTemplates>
    <FileTemplates>
      <Template uid="3c8e78ba-121f-435f-94b9-11b0ff4b84a9" shortcut="" description="Command Class" text="using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Stump.DofusProtocol.Enums;&#xD;&#xA;using Stump.Server.BaseServer.Commands;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;	public class $COMMAND$ : $TYPE$Command&#xD;&#xA;    {&#xD;&#xA;        public $COMMAND$()&#xD;&#xA;        {&#xD;&#xA;            Aliases = new[] {&quot;$ALIASES$&quot;};&#xD;&#xA;            RequiredRole = RoleEnum.$ROLE$;&#xD;&#xA;            Description = &quot;$DESCRIPTION$&quot;;&#xD;&#xA;            Parameters = new List&lt;ICommandParameter&gt;&#xD;&#xA;                {&#xD;&#xA;					&#xD;&#xA;                };&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public override void Execute(TriggerBase trigger)&#xD;&#xA;        {&#xD;&#xA;            $END$&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
        <Context>
          <ProjectLanguageContext language="CSharp" />
        </Context>
        <Categories />
        <Variables>
          <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="0" />
          <Variable name="COMMAND" expression="getFileNameWithoutExtension()" initialRange="0" />
          <Variable name="TYPE" expression="list(&quot;World, WorldSub, Auth, AuthSub&quot;)" initialRange="0" />
          <Variable name="ALIASES" expression="" initialRange="0" />
          <Variable name="ROLE" expression="completeSmart()" initialRange="0" />
          <Variable name="DESCRIPTION" expression="" initialRange="0" />
        </Variables>
        <CustomProperties>
          <Property key="FileName" value="Class" />
          <Property key="Extension" value="cs" />
          <Property key="ValidateFileName" value="False" />
        </CustomProperties>
      </Template>
    </FileTemplates>
  </SharedSolutionTemplateManager>
  <CustomStructuralPatterns>
    <Pattern Severity="SUGGESTION">
      <ReplacePattern IsNull="True" />
      <SearchPattern>$type$ $var$</SearchPattern>
      <Params />
      <Placeholders>
        <ExpressionPlaceholder Name="Revision" ExpressionType="System.UInt32" ExactType="True" />
        <IdentifierPlaceholder Name="var" Type="" ExactType="False" RegEx="" CaseSensitive="True" />
        <TypePlaceholder Name="type" Type="System.UInt32" ExactType="True" />
      </Placeholders>
    </Pattern>
  </CustomStructuralPatterns>
</Configuration>