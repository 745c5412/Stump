<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="DofusProtocolBuilder" #>
<#@ import namespace="DofusProtocolBuilder.Parsing" #>
<#@ import namespace="DofusProtocolBuilder.XmlPatterns" #>

<#+
void WriteField(FieldInfo field)
{
	switch (field.Modifiers)
	{
		case AccessModifiers.Public:
			Write("public ");
			break;
		case AccessModifiers.Protected:
			Write("protected ");
			break;
		case AccessModifiers.Private:
			Write("private ");
			break;
		case AccessModifiers.Internal:
			Write("internal ");
			break;
	}

	if (field.IsConst)
	{
		Write("const ");
	}

	if (field.IsStatic)
	{
		Write("static ");
	}

	Write(field.Type + " ");
	Write(field.Name);

	if (!string.IsNullOrEmpty(field.Value))
	{
		Write(" = " + field.Value);
	}

	Write(";");
	WriteLine("");
}

void WriteField(XmlField field)
{
    Write("public ");

    Write(GetRealType(field.Type));
    Write(" " + field.Name);

    WriteLine(";");
} 

void WriteDBProperty(FieldInfo field)
{
    bool isComplexType = false;
    if (!IsPrimitiveType(field.Type.ToString()))
    {
        isComplexType = true;
    }

    if(isComplexType)
        WriteLine("[Ignore]");

    if (field.Type.ToString() == "String")
        WriteLine("[NullString]");

    Write("public ");

    Write(field.Type.ToString(false));
    WriteLine(" " + ToPascalCase(field.Name));
    
    WriteLine("{");
    PushIndent("    ");
    WriteLine("get { return " + field.Name + "; }");
    
    if (isComplexType)
    {
        WriteLine("set");
        WriteLine("{");
            PushIndent("    ");
            WriteLine(field.Name + " = value;");
            WriteLine("m_" + field.Name + "Bin = value == null ? null : value.ToBinary();");
            PopIndent();
        WriteLine("}");
    }
    else
        WriteLine("set { " + field.Name + " = value; }");

    PopIndent();
    WriteLine("}");

    if (isComplexType)
    {
        WriteLine("");
        WriteLine("private byte[] m_" + field.Name + "Bin;");
        WriteLine("[D2OIgnore]");
        WriteLine("[BinaryField]");
        WriteLine("[Browsable(false)]");
        WriteLine("public byte[] " + ToPascalCase(field.Name) + "Bin");
        WriteLine("{");
            PushIndent("    ");
            WriteLine("get { return m_" + field.Name + "Bin; }");
            WriteLine("set");
            WriteLine("{");
                PushIndent("    ");
                WriteLine("m_" + field.Name + "Bin = value;");
                WriteLine(field.Name + " = value == null ? null : value.ToObject<" + field.Type + ">();");
                PopIndent();
            WriteLine("}");
            PopIndent();
        WriteLine("}");
    }
}

static string[] m_primitives = new string[]{"int", "uint", "long", "ulong,", "short", "ushort", "byte", "sbyte", "float", "double", "decimal", "string", "bool","boolean"};
bool IsPrimitiveType(string type)
{
    return m_primitives.Contains(type.ToLower());
}

string ToPascalCase(string name)
{
    if (!char.IsLetter(name[0]))
        return char.ToUpper(name[1]) + name.Substring(2);
    else
        return char.ToUpper(name[0]) + name.Substring(1);
}
    
XmlField[] GetHierarchyFields(XmlMessage message)
{
	if (message.Heritage == string.Empty ||
        message.Heritage == "Message")
		return new XmlField[0];

    var baseMessage = Program.Configuration.XmlMessagesProfile.SearchXmlPattern(message.Heritage);

	if (baseMessage == null)
        return new XmlField[0];

    return GetHierarchyFields(baseMessage).Concat(baseMessage.Fields).ToArray();
}

XmlField[] GetHierarchyFields(XmlType type)
{
    if (type.Heritage == string.Empty ||
        type.Heritage == "Object")
        return new XmlField[0];

    var baseType = Program.Configuration.XmlTypesProfile.SearchXmlPattern(type.Heritage);

    if (baseType == null)
        return new XmlField[0];

    return GetHierarchyFields(baseType).Concat(baseType.Fields).ToArray();
}
    
void WriteIOMethodStatements(IEnumerable<XmlField> fields, bool serializeMethod)
{
	bool limitDefined = false;
    int? flagsCount = null;
    int? lastFlagOffset = null;
    string limit = null;

    foreach(var field in fields)
    {
		string arrayLength = field.ArrayLength;
		string type = field.Type;
		string name = field.Name;

		bool array = false;

		if (type.EndsWith("[]"))
		{
            array = true;
            int limitInt;
            var hasLimit = int.TryParse(arrayLength, out limitInt);
            limit = hasLimit ? limitInt.ToString() : "";
            
			if (!hasLimit)
			{
				if (!serializeMethod)
				{
					WriteLine((limitDefined ? string.Empty : "var ") + "limit = reader.Read" + GetIOMethodTypeName(arrayLength) + "();");
					limitDefined = true;
				}

				limit = "limit";

				if (serializeMethod)
				{
                    if (Program.Configuration.UseIEnumerable)
                    {
                        if (!arrayLength.StartsWith("var"))
                        {
                            WriteLine("var " + name + "_before = writer.Position;");
                            WriteLine("var " + name + "_count = 0;");
                            WriteLine("writer.Write" + GetIOMethodTypeName(arrayLength) + "(0);");
                        }
                        else
                            WriteLine("writer.Write" + GetIOMethodTypeName(arrayLength) + "(" + "(" + GetRealType(arrayLength) + ")" + name + ".Count());");
                    }

					else
						WriteLine("writer.Write" + GetIOMethodTypeName(arrayLength) + "(" + "(" + GetRealType(arrayLength) + ")" + name + ".Length);");
				}
			}

			type = type.Substring(0, type.Length - 2);

			if (!serializeMethod)
			{
                if (Program.Configuration.UseIEnumerable)
                {
                    name = name + "_"; // temp name
                    WriteLine(string.Format("var {0} = new {1}[{2}];", name, GetRealType(type), limit));
                }
                else
                    WriteLine(string.Format("{0} = new {1}[{2}];", name, GetRealType(type), limit));

				WriteLine("for (int i = 0; i < " + limit + "; i++)");
				WriteLine("{");
				PushIndent("     ");

                name = name + "[i]";
			}
			else
			{
				WriteLine("foreach (var entry in " + field.Name + ")");
				WriteLine("{");
				PushIndent("     ");

                name = "entry";
			}
		}

		if (serializeMethod &&
			(lastFlagOffset.HasValue && flagsCount.HasValue) &&
			(lastFlagOffset.Value >= 7 || !type.StartsWith("flag") ))
		{
			WriteLine("writer.WriteByte(flag" + flagsCount + ");");
			lastFlagOffset = null;
		}

		if (type.StartsWith("flag"))
		{
			Match match = Regex.Match(type, @"flag\((\d+)\)");

			if (match.Success)
			{
				if (!lastFlagOffset.HasValue || lastFlagOffset.Value >= 7)
				{
					flagsCount = flagsCount.HasValue ? flagsCount + 1 : 1;

					if (serializeMethod)
						WriteLine("byte flag" + flagsCount + " = 0;");
					else
						WriteLine("byte flag" + flagsCount + " = reader.ReadByte();");
				}

				int flagOffset = int.Parse(match.Groups[1].Value);
				lastFlagOffset = flagOffset;

				if (serializeMethod)
					WriteLine(string.Format("flag{0} = BooleanByteWrapper.SetFlag(flag{0}, {1}, {2});", flagsCount, flagOffset, name));
				else
					WriteLine(string.Format("{0} = BooleanByteWrapper.GetFlag(flag{1}, {2});", name, flagsCount, flagOffset));
			}
		}
		else if (type.StartsWith("Types."))
		{
			if (serializeMethod)
				WriteLine(string.Format("{0}.Serialize(writer);", name));
			else
			{
				WriteLine(string.Format("{0} = new {1}();", name, type));
				WriteLine(string.Format("{0}.Deserialize(reader);", name));
			}
		}
		else if (type.StartsWith("instance of"))
		{
         
			if (serializeMethod)
			{
				WriteLine(string.Format("writer.WriteShort({0}.TypeId);", name));
				WriteLine(string.Format("{0}.Serialize(writer);", name));
			}
			else
			{            
				Match match = Regex.Match(type, @"instance of ([\w\d_\.]+)");

				if (match.Success)
				{  
					string instanceType = match.Groups[1].Value;
                    
					WriteLine(string.Format("{0} = Types.ProtocolTypeManager.GetInstance<{1}>(reader.ReadShort());", name, instanceType));
					WriteLine(string.Format("{0}.Deserialize(reader);", name));
				}
				else
					Error(string.Format("Type {0} doesn't match 'instance of ([\\w\\d_\\.]+)'", type));
			}
		}
		else
		{
			if (serializeMethod)
				WriteLine(string.Format("writer.Write{0}({1});", GetIOMethodTypeName(type), name));
			else
				WriteLine(string.Format("{0} = reader.Read{1}();", name, GetIOMethodTypeName(type)));
		}
        
		if (!string.IsNullOrEmpty(field.Condition))
		{
			if (!serializeMethod)
			{
				WriteLine("if (" + field.Condition + ")");
				PushIndent("    ");
				WriteLine(string.Format("throw new Exception(\"Forbidden value on {0} = \" + {0} + \", " + 
					"it doesn't respect the following condition : {1}\");", name, field.Condition));
				PopIndent();
			}
		}

		if (array)
		{
            if (serializeMethod && limit=="limit" && !arrayLength.StartsWith("var"))
                WriteLine(field.Name + "_count++;");

			PopIndent();
            WriteLine("}");

            if (!serializeMethod)
                WriteLine("{0} = {1};", field.Name, name.Remove(name.Length - 3)); // removes [i]
            else if (limit == "limit" && Program.Configuration.UseIEnumerable && !arrayLength.StartsWith("var"))
			{
                WriteLine("var " + field.Name + "_after = writer.Position;");
                WriteLine("writer.Seek((int)" + field.Name + "_before);");
                WriteLine("writer.Write" + GetIOMethodTypeName(arrayLength) + "(" + "(" + GetRealType(arrayLength) + ")" + field.Name + "_count);");
                WriteLine("writer.Seek((int)" + field.Name + "_after);");
                WriteLine("");
            }
		}
    }
        
    if (lastFlagOffset.HasValue)
    {
        if (serializeMethod)
			WriteLine("writer.WriteByte(flag" + flagsCount + ");");
    }
}

string GetRealType(string rawType)
{
    if (rawType.StartsWith("instance of "))
        rawType = rawType.Replace("instance of ", "");

    var match = Regex.Match(rawType, @"([\.\w\d_]+)\[\]");

    if (match.Success)
    {
        if (Program.Configuration.UseIEnumerable)
            return "IEnumerable<" + GetRealType(match.Groups[1].Value) + ">";

        return GetRealType(match.Groups[1].Value) + "[]";
    }

    if (rawType.StartsWith("flag"))
        return "bool";

    if (rawType.StartsWith("varuh"))
    {
        return rawType.Remove(0, 5);
    }
    else if (rawType.StartsWith("var"))
    {
        return rawType.Remove(0, 3);
    }

    switch (rawType)
    {
        case "utf":
            return "string";
        case "boolean":
            return "bool";
        default:
            return rawType;
    }
}
    
string GetIOMethodTypeName(string rawType)
{
    if (rawType.StartsWith("instance of "))
        rawType = rawType.Replace("instance of ", "");

    char[] letters = rawType.ToCharArray();

    if (rawType == "utf")
        return "UTF";
    if (rawType.StartsWith("var"))
    {
        if (rawType.StartsWith("varuh"))
        {
            rawType = rawType.Remove(3, 2);
            letters = rawType.ToCharArray();
        }
        
        letters[0] = char.ToUpper(letters[0]);
        letters[3] = char.ToUpper(letters[3]);

        return new string(letters);
    }
    if (rawType.StartsWith("u") || rawType == "sbyte")
    {
        letters[0] = char.ToUpper(letters[0]);
        letters[1] = char.ToUpper(letters[1]);

        return new string(letters);
    }


    letters[0] = char.ToUpper(letters[0]);

    return new string(letters);
}

string GetFieldBytesCountCode(string fieldType, string fieldName)
{
	switch(fieldType.ToLower())
	{
		case "byte":
		case "sbyte":
		case "short":
		case "ushort":
		case "int":
		case "uint":
		case "float":
		case "double":
		case "long":
		case "ulong":
		case "decimal":
			return "sizeof(" + fieldType + ")";
		case "utf":
			return "sizeof(short) + Encoding.UTF8.GetByteCount(" + fieldName + ")";
		case "boolean":
			return "sizeof(bool)";
		default:
		{
			if (fieldType.EndsWith("[]"))
			{
                string collectionType;
                if (fieldType[fieldType.IndexOf("[") + 1] != ']') // fixed list size
                {   
				    collectionType = fieldType.Remove(fieldType.IndexOf("["));
                    return fieldName + ".Sum(x => " + GetFieldBytesCountCode(collectionType, "x") + ")";
                }

				collectionType = fieldType.Remove(fieldType.Length - 2);
				return "sizeof(short) + " + fieldName + ".Sum(x => " + GetFieldBytesCountCode(collectionType, "x") + ")";
			}
			else if (fieldType.StartsWith("flag"))
			{
				var index = int.Parse(fieldType.Substring(fieldType.IndexOf("(") + 1, 1));
				if (index % 8 == 0)
					return "sizeof(bool)";
				else
					return "0";
			}
			else if (fieldType.StartsWith("instance of"))
			{
				return "sizeof(short) + " + fieldName + ".GetSerializationSize()";
			}
			return fieldName + ".GetSerializationSize()";
		}
		
	}
}

static bool HasHeritage(string heritage)
{
	return !string.IsNullOrEmpty(heritage) && heritage != "Object";
}
#>