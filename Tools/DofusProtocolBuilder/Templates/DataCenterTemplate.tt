<#@ template language="C#" debug="true"  #>
<#@ output extension=".cs" #>
<#@ assembly name="System.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="DofusProtocolBuilder.Parsing" #>
<#@ import namespace="DofusProtocolBuilder.Parsing.Elements" #>
<#@ parameter name="Parser" type="DofusProtocolBuilder.Parsing.Parser" #>
<#@ parameter name="Profile" type="DofusProtocolBuilder.Profiles.ParsingProfile" #>
<#@ include file="./Helper.tt"#>
// Generated on <#= DateTime.Now #>
using System;
using System.Collections.Generic;
using Stump.DofusProtocol.D2oClasses;
using Stump.DofusProtocol.D2oClasses.Tools.D2o;

namespace <#= Profile.OutPutNamespace #>
{
<# PushIndent("    "); #>
<# 
var idField = Parser.Fields.FirstOrDefault(x => x.Name == "id");

if (idField == null)
    idField = Parser.Fields.FirstOrDefault(x => x.Modifiers == AccessModifiers.Public && x.Name.ToLower().Contains("id") && (x.Type.Name == "int" || x.Type.Name == "uint") && !x.Name.ToLower().Contains("type"));

if (idField == null)
    idField = Parser.Fields.FirstOrDefault(x => x.Modifiers == AccessModifiers.Public && x.Name.ToLower().Contains("id") && (x.Type.Name == "int" || x.Type.Name == "uint"));

if (Parser.Class.Name == "InfoMessage" || Parser.Class.Name == "RideFood")
    idField = null;
#>
<# WriteLine("[D2OClass(\"" + Parser.Class.Name + "\", \"" + Parser.Class.Namespace + "\")]"); #>
[Serializable]
public class <#=Parser.Class.Name #><#=( HasHeritage(Parser.Class.Heritage) ? (" : " + Parser.Class.Heritage) : (" : IDataObject" + (idField != null ? ", IIndexedData" : "")) ) #>
{
<# PushIndent("    "); #>
<#
foreach (var field in Parser.Fields)
{
	if (field.Modifiers != AccessModifiers.Public && field.Name != "MODULE")
		continue;
    
    bool isI18nField = false;
    foreach(var property in Parser.Properties)
    {
        if (property.MethodGet != null)
        {
            var i18nAssignation = property.MethodGet.Statements.OfType<AssignationStatement>().
                FirstOrDefault(x => x.Value.Contains("I18n.getText") && x.Value.Contains(field.Name));

            if (i18nAssignation != null)
            {
                isI18nField = true;
                break;
            }
        }
    }
    
    if (isI18nField)
        WriteLine("[I18NField]");

    WriteField(field);
} 

if (idField != null && !HasHeritage(Parser.Class.Heritage))
{
    WriteLine("int IIndexedData.Id");
    WriteLine("{");
    if (Parser.Class.Name == "InfoMessage")
        WriteLine("    get { return (int)(typeId * 10000 + messageId); }");
    else
        WriteLine("    get { return (int)" + idField.Name + "; }");
    WriteLine("}");
}

foreach (var field in Parser.Fields)
{
    if (field.Modifiers != AccessModifiers.Public || field.IsConst || field.IsStatic || field.Name == "MODULE")
        continue;

    var name = ToPascalCase(field.Name);

    if (name == Parser.Class.Name)
        name += "_";
    
    WriteLine("[D2OIgnore]");
    Write("public ");
    Write(field.Type.ToString());
    WriteLine(" " + name);
    WriteLine("{");
    WriteLine("    get { return this." + field.Name + "; }");
    WriteLine("    set { this." + field.Name + " = value; }");
    WriteLine("}");
}

#>
<# PopIndent(); #>
}
<# PopIndent(); #>
}