<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="DofusProtocolBuilder.Parsing.Elements" #>
<#@ parameter name="Profile" type="DofusProtocolBuilder.Profiles.ParsingProfile" #>
<#@ parameter name="Parser" type="DofusProtocolBuilder.Parsing.Parser"#>
<#@ include file="./Helper.tt"#>
// Generated on <#= DateTime.Now #>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Stump.Core.IO;
using Stump.DofusProtocol.D2oClasses;
using Stump.DofusProtocol.D2oClasses.Tools.D2o;
using Stump.ORM;
using Stump.ORM.SubSonic.SQLGeneration.Schema;

namespace DBSynchroniser.Records
{
<# PushIndent("    "); #>
<#
var module = Parser.Fields.FirstOrDefault(x => x.Name == "MODULE");

if (module != null)
    WriteLine(string.Format("[TableName({0})]", module.Value));
else if (Parser.Class.Name == "Weapon") // only exception
    WriteLine(string.Format("[TableName(\"Weapons\")]", Parser.Class.Name));
#>
<# WriteLine("[D2OClass(\"" + Parser.Class.Name + "\", \"" + Parser.Class.Namespace + "\")]"); #>
public class <#=Parser.Class.Name #>Record<#=( HasHeritage(Parser.Class.Heritage) && Parser.Class.Heritage.Length > 0 ? " : " + Parser.Class.Heritage + "Record, ID2ORecord, ISaveIntercepter" : " : ID2ORecord, ISaveIntercepter" ) #>
{
<# PushIndent("    "); #>
<# var idField = Parser.Fields.FirstOrDefault(x => x.Name == "id");

if (idField == null)
    idField = Parser.Fields.FirstOrDefault(x => x.Modifiers == AccessModifiers.Public && x.Name.ToLower().Contains("id") && (x.Type.Name == "int" || x.Type.Name == "uint") && !x.Name.ToLower().Contains("type"));

if (idField == null)
    idField = Parser.Fields.FirstOrDefault(x => x.Modifiers == AccessModifiers.Public && x.Name.ToLower().Contains("id") && (x.Type.Name == "int" || x.Type.Name == "uint"));

if (Parser.Class.Name == "InfoMessage" || Parser.Class.Name == "RideFood")
    idField = null;

foreach (var field in Parser.Fields)
{
	if (field.Modifiers != AccessModifiers.Public && field.Name != "MODULE")
		continue;

    bool isI18nField = false;
    foreach(var property in Parser.Properties)
    {
        if (property.MethodGet != null)
        {
            var i18nAssignation = property.MethodGet.Statements.OfType<AssignationStatement>().
                FirstOrDefault(x => x.Value.Contains("I18n.getText") && x.Value.Contains(field.Name));

            if (i18nAssignation != null)
            {
                isI18nField = true;
                break;
            }
        }
    }
    
    if (isI18nField)
        WriteLine("[I18NField]");

    WriteField(field);
} 
WriteLine("");

if (idField != null && !HasHeritage(Parser.Class.Heritage))
{
    WriteLine("int ID2ORecord.Id");
    WriteLine("{");
    if (Parser.Class.Name == "InfoMessage")
        WriteLine("    get { return (int)(typeId * 10000 + messageId); }");
    else
        WriteLine("    get { return (int)" + (idField != null ? idField.Name : "Id") + "; }");
    WriteLine("}");
}

WriteLine("");
if (idField == null && !HasHeritage(Parser.Class.Heritage))
{
    WriteLine("[D2OIgnore]");
    WriteLine("[PrimaryKey(\"Id\")]");
    WriteLine("public int Id");
    WriteLine("{");
    
    if (Parser.Class.Name == "InfoMessage")
    {
        WriteLine("    get { return (int)(typeId * 10000 + messageId); }");
        WriteLine("    set { }");
    }
    else
    {
        WriteLine("    get;");
        WriteLine("    set;");
    }
    WriteLine("}");
}

WriteLine("");
foreach (var field in Parser.Fields)
{
	if (field.Modifiers != AccessModifiers.Public || field.Name == "MODULE" || field.IsConst || field.IsStatic)
		continue;

    WriteLine("[D2OIgnore]");
    if (field == idField && !HasHeritage(Parser.Class.Heritage))
        WriteLine("[PrimaryKey(\"" + ToPascalCase(idField.Name) + "\", false)]");
        
    bool isI18nField = false;
    foreach(var property in Parser.Properties)
    {
        if (property.MethodGet != null)
        {
            var i18nAssignation = property.MethodGet.Statements.OfType<AssignationStatement>().
                FirstOrDefault(x => x.Value.Contains("I18n.getText") && x.Value.Contains(field.Name));

            if (i18nAssignation != null)
            {
                isI18nField = true;
                break;
            }
        }
    }

    if (isI18nField)
        WriteLine("[I18NField]");

    WriteDBProperty(field);
    WriteLine("");
}
#>
public <#= HasHeritage(Parser.Class.Heritage) ? "override" : "virtual" #> void AssignFields(object obj)
{
<# PushIndent("    "); #>
var castedObj = (<#=Parser.Class.Name #>)obj;

<#
if (HasHeritage(Parser.Class.Heritage))
{
    WriteLine("base.AssignFields(obj);");
}

foreach (var field in Parser.Fields)
{
	if (field.Modifiers != AccessModifiers.Public || field.Name == "MODULE" || field.IsConst || field.IsStatic)
		continue;

	Write(ToPascalCase(field.Name));
    Write(" = ");
    if (field.Name == "OpeningDate")
        Write("(" + field.Type + ")");
    Write("castedObj." + field.Name);
    WriteLine(";");
}
#>
<# PopIndent(); #>
}

public <#= HasHeritage(Parser.Class.Heritage) ? "override" : "virtual" #> object CreateObject(object parent = null)
{
<# PushIndent("    "); #>
<#
if (HasHeritage(Parser.Class.Heritage))
{
    WriteLine("var obj = new " + Parser.Class.Name + "();");
    WriteLine("base.CreateObject(obj);");
}
else
{
    WriteLine("var obj = parent != null ? (" + Parser.Class.Name + ")parent : new " + Parser.Class.Name + "();");
}

foreach (var field in Parser.Fields)
{
	if (field.Modifiers != AccessModifiers.Public || field.Name == "MODULE" || field.IsConst || field.IsStatic)
		continue;

    Write("obj." + field.Name);
    Write(" = ");
	Write(ToPascalCase(field.Name));
    WriteLine(";");
}
#>
return obj;
<# PopIndent(); #>
}

public <#= HasHeritage(Parser.Class.Heritage) ? "override" : "virtual" #> void BeforeSave(bool insert)
{
<# PushIndent("    "); #>
<#
if (HasHeritage(Parser.Class.Heritage))
{
    WriteLine("base.BeforeSave(insert);");
}

foreach (var field in Parser.Fields)
{
	if (field.Modifiers != AccessModifiers.Public || field.Name == "MODULE" || field.IsConst || field.IsStatic)
		continue;

    if (!IsPrimitiveType(field.Type.Name))
        WriteLine(string.Format("m_{0}Bin = {0} == null ? null : {0}.ToBinary();", field.Name));
}
#>
<# PopIndent(); #>

}
<# PopIndent(); #>
}
<# PopIndent(); #>
}